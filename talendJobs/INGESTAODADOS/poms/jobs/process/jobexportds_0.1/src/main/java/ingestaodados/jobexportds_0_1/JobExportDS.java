// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ingestaodados.jobexportds_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: JobExportDS Purpose: Job para exportar dados para a equipe de Data
 * Scientists<br>
 * Description: Job para exportar dados para a equipe de Data Scientists <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class JobExportDS implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "JobExportDS";
	private final String projectName = "INGESTAODADOS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					JobExportDS.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(JobExportDS.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_category_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_model_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_addressShip_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_customer_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_addressBILL_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class vendedoresStruct implements routines.system.IPersistableRow<vendedoresStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_INGESTAODADOS_JobExportDS.length) {
					if (length < 1024 && commonByteArray_INGESTAODADOS_JobExportDS.length == 0) {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[1024];
					} else {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_INGESTAODADOS_JobExportDS, 0, length);
				strReturn = new String(commonByteArray_INGESTAODADOS_JobExportDS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.SalesPerson = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.SalesPerson, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(vendedoresStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class clientesStruct implements routines.system.IPersistableRow<clientesStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_INGESTAODADOS_JobExportDS.length) {
					if (length < 1024 && commonByteArray_INGESTAODADOS_JobExportDS.length == 0) {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[1024];
					} else {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_INGESTAODADOS_JobExportDS, 0, length);
				strReturn = new String(commonByteArray_INGESTAODADOS_JobExportDS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.CompanyName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.CompanyName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",CompanyName=" + CompanyName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(clientesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public boolean NameStyle;

		public boolean getNameStyle() {
			return this.NameStyle;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_INGESTAODADOS_JobExportDS.length) {
					if (length < 1024 && commonByteArray_INGESTAODADOS_JobExportDS.length == 0) {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[1024];
					} else {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_INGESTAODADOS_JobExportDS, 0, length);
				strReturn = new String(commonByteArray_INGESTAODADOS_JobExportDS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.NameStyle = dis.readBoolean();

					this.Title = readString(dis);

					this.FirstName = readString(dis);

					this.MiddleName = readString(dis);

					this.LastName = readString(dis);

					this.Suffix = readString(dis);

					this.CompanyName = readString(dis);

					this.SalesPerson = readString(dis);

					this.EmailAddress = readString(dis);

					this.Phone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// boolean

				dos.writeBoolean(this.NameStyle);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.MiddleName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Suffix, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.SalesPerson, dos);

				// String

				writeString(this.EmailAddress, dos);

				// String

				writeString(this.Phone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",NameStyle=" + String.valueOf(NameStyle));
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				vendedoresStruct vendedores = new vendedoresStruct();
				clientesStruct clientes = new clientesStruct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "vendedores");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"D:/DataLake/Curated/DC_vendedores_" + TalendDate.getDate("YYYY-MM-DD") + ".csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("CustomerID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SalesPerson");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "clientes");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"D:/DataLake/Curated/DC_company_" + TalendDate.getDate("YYYY-MM-DD") + ".csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("CustomerID");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("CompanyName");
					outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				vendedoresStruct vendedores_tmp = new vendedoresStruct();
				clientesStruct clientes_tmp = new clientesStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "D:/DataLake/Harmonized/HA_customer_"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = 254;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"D:/DataLake/Harmonized/HA_customer_" + TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_1, 254, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.CustomerID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CustomerID", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'CustomerID' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.NameStyle = ParserUtils.parseTo_boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NameStyle", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'NameStyle' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.Title = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.FirstName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.MiddleName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.LastName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.Suffix = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.CompanyName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.SalesPerson = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.EmailAddress = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.Phone = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								vendedores = null;
								clientes = null;

// # Output table : 'vendedores'
								vendedores_tmp.CustomerID = row1.CustomerID;
								vendedores_tmp.SalesPerson = row1.SalesPerson;
								vendedores = vendedores_tmp;

// # Output table : 'clientes'
								clientes_tmp.CustomerID = row1.CustomerID;
								clientes_tmp.CompanyName = row1.CompanyName;
								clientes = clientes_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "vendedores"
							if (vendedores != null) {

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "vendedores");
								}

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
								sb_tFileOutputDelimited_1.append(vendedores.CustomerID);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (vendedores.SalesPerson != null) {
									sb_tFileOutputDelimited_1.append(vendedores.SalesPerson);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;
								resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

								outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_end ] stop
								 */

							} // End of branch "vendedores"

// Start of branch "clientes"
							if (clientes != null) {

								/**
								 * [tFileOutputDelimited_2 main ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "clientes");
								}

								StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
								sb_tFileOutputDelimited_2.append(clientes.CustomerID);
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (clientes.CompanyName != null) {
									sb_tFileOutputDelimited_2.append(clientes.CompanyName);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

								nb_line_tFileOutputDelimited_2++;
								resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

								outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

								tos_count_tFileOutputDelimited_2++;

								/**
								 * [tFileOutputDelimited_2 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								/**
								 * [tFileOutputDelimited_2 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								/**
								 * [tFileOutputDelimited_2 process_data_end ] stop
								 */

							} // End of branch "clientes"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("D:/DataLake/Harmonized/HA_customer_" + TalendDate.getDate("YYYY-MM-DD")
							+ ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "vendedores");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "clientes");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class produtoStruct implements routines.system.IPersistableRow<produtoStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Category;

		public String getCategory() {
			return this.Category;
		}

		public String Model;

		public String getModel() {
			return this.Model;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		public Object ListPrice;

		public Object getListPrice() {
			return this.ListPrice;
		}

		public Object Size;

		public Object getSize() {
			return this.Size;
		}

		public Object Weight;

		public Object getWeight() {
			return this.Weight;
		}

		public String SellStartDate;

		public String getSellStartDate() {
			return this.SellStartDate;
		}

		public String SellEndDate;

		public String getSellEndDate() {
			return this.SellEndDate;
		}

		public String DiscontinuedDate;

		public String getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_INGESTAODADOS_JobExportDS.length) {
					if (length < 1024 && commonByteArray_INGESTAODADOS_JobExportDS.length == 0) {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[1024];
					} else {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_INGESTAODADOS_JobExportDS, 0, length);
				strReturn = new String(commonByteArray_INGESTAODADOS_JobExportDS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.Name = readString(dis);

					this.Category = readString(dis);

					this.Model = readString(dis);

					this.ProductNumber = readString(dis);

					this.Color = readString(dis);

					this.StandardCost = (Object) dis.readObject();

					this.ListPrice = (Object) dis.readObject();

					this.Size = (Object) dis.readObject();

					this.Weight = (Object) dis.readObject();

					this.SellStartDate = readString(dis);

					this.SellEndDate = readString(dis);

					this.DiscontinuedDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Category, dos);

				// String

				writeString(this.Model, dos);

				// String

				writeString(this.ProductNumber, dos);

				// String

				writeString(this.Color, dos);

				// Object

				dos.writeObject(this.StandardCost);

				// Object

				dos.writeObject(this.ListPrice);

				// Object

				dos.writeObject(this.Size);

				// Object

				dos.writeObject(this.Weight);

				// String

				writeString(this.SellStartDate, dos);

				// String

				writeString(this.SellEndDate, dos);

				// String

				writeString(this.DiscontinuedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",Category=" + Category);
			sb.append(",Model=" + Model);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",Color=" + Color);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",Size=" + String.valueOf(Size));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",SellStartDate=" + SellStartDate);
			sb.append(",SellEndDate=" + SellEndDate);
			sb.append(",DiscontinuedDate=" + DiscontinuedDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(produtoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class productStruct implements routines.system.IPersistableRow<productStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		public Object ListPrice;

		public Object getListPrice() {
			return this.ListPrice;
		}

		public String Size;

		public String getSize() {
			return this.Size;
		}

		public BigDecimal Weight;

		public BigDecimal getWeight() {
			return this.Weight;
		}

		public Integer ProductCategoryID;

		public Integer getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public Integer ProductModelID;

		public Integer getProductModelID() {
			return this.ProductModelID;
		}

		public String SellStartDate;

		public String getSellStartDate() {
			return this.SellStartDate;
		}

		public String SellEndDate;

		public String getSellEndDate() {
			return this.SellEndDate;
		}

		public String DiscontinuedDate;

		public String getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_INGESTAODADOS_JobExportDS.length) {
					if (length < 1024 && commonByteArray_INGESTAODADOS_JobExportDS.length == 0) {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[1024];
					} else {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_INGESTAODADOS_JobExportDS, 0, length);
				strReturn = new String(commonByteArray_INGESTAODADOS_JobExportDS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.Name = readString(dis);

					this.ProductNumber = readString(dis);

					this.Color = readString(dis);

					this.StandardCost = (Object) dis.readObject();

					this.ListPrice = (Object) dis.readObject();

					this.Size = readString(dis);

					this.Weight = (BigDecimal) dis.readObject();

					this.ProductCategoryID = readInteger(dis);

					this.ProductModelID = readInteger(dis);

					this.SellStartDate = readString(dis);

					this.SellEndDate = readString(dis);

					this.DiscontinuedDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.ProductNumber, dos);

				// String

				writeString(this.Color, dos);

				// Object

				dos.writeObject(this.StandardCost);

				// Object

				dos.writeObject(this.ListPrice);

				// String

				writeString(this.Size, dos);

				// BigDecimal

				dos.writeObject(this.Weight);

				// Integer

				writeInteger(this.ProductCategoryID, dos);

				// Integer

				writeInteger(this.ProductModelID, dos);

				// String

				writeString(this.SellStartDate, dos);

				// String

				writeString(this.SellEndDate, dos);

				// String

				writeString(this.DiscontinuedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",Color=" + Color);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",Size=" + Size);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",SellStartDate=" + SellStartDate);
			sb.append(",SellEndDate=" + SellEndDate);
			sb.append(",DiscontinuedDate=" + DiscontinuedDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(productStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		public Object ListPrice;

		public Object getListPrice() {
			return this.ListPrice;
		}

		public String Size;

		public String getSize() {
			return this.Size;
		}

		public BigDecimal Weight;

		public BigDecimal getWeight() {
			return this.Weight;
		}

		public Integer ProductCategoryID;

		public Integer getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public Integer ProductModelID;

		public Integer getProductModelID() {
			return this.ProductModelID;
		}

		public String SellStartDate;

		public String getSellStartDate() {
			return this.SellStartDate;
		}

		public String SellEndDate;

		public String getSellEndDate() {
			return this.SellEndDate;
		}

		public String DiscontinuedDate;

		public String getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_INGESTAODADOS_JobExportDS.length) {
					if (length < 1024 && commonByteArray_INGESTAODADOS_JobExportDS.length == 0) {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[1024];
					} else {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_INGESTAODADOS_JobExportDS, 0, length);
				strReturn = new String(commonByteArray_INGESTAODADOS_JobExportDS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.Name = readString(dis);

					this.ProductNumber = readString(dis);

					this.Color = readString(dis);

					this.StandardCost = (Object) dis.readObject();

					this.ListPrice = (Object) dis.readObject();

					this.Size = readString(dis);

					this.Weight = (BigDecimal) dis.readObject();

					this.ProductCategoryID = readInteger(dis);

					this.ProductModelID = readInteger(dis);

					this.SellStartDate = readString(dis);

					this.SellEndDate = readString(dis);

					this.DiscontinuedDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.ProductNumber, dos);

				// String

				writeString(this.Color, dos);

				// Object

				dos.writeObject(this.StandardCost);

				// Object

				dos.writeObject(this.ListPrice);

				// String

				writeString(this.Size, dos);

				// BigDecimal

				dos.writeObject(this.Weight);

				// Integer

				writeInteger(this.ProductCategoryID, dos);

				// Integer

				writeInteger(this.ProductModelID, dos);

				// String

				writeString(this.SellStartDate, dos);

				// String

				writeString(this.SellEndDate, dos);

				// String

				writeString(this.DiscontinuedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",Color=" + Color);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",Size=" + Size);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",SellStartDate=" + SellStartDate);
			sb.append(",SellEndDate=" + SellEndDate);
			sb.append(",DiscontinuedDate=" + DiscontinuedDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_4Process(globalMap);

				productStruct product = new productStruct();
				produtoStruct produto = new produtoStruct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "produto");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"D:/DataLake/Curated/DC_produtos_" + TalendDate.getDate("YYYY-MM-DD") + ".csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("ProductID");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Name");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Category");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Model");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("ProductNumber");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Color");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("StandardCost");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("ListPrice");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Size");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Weight");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("SellStartDate");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("SellEndDate");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("DiscontinuedDate");
					outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "product");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<categoryStruct> tHash_Lookup_category = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<categoryStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<categoryStruct>) globalMap
						.get("tHash_Lookup_category"));

				categoryStruct categoryHashKey = new categoryStruct();
				categoryStruct categoryDefault = new categoryStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<modelStruct> tHash_Lookup_model = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<modelStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<modelStruct>) globalMap
						.get("tHash_Lookup_model"));

				modelStruct modelHashKey = new modelStruct();
				modelStruct modelDefault = new modelStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				produtoStruct produto_tmp = new produtoStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "D:/DataLake/Harmonized/HA_product_"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = 88;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"D:/DataLake/Harmonized/HA_product_" + TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_2, 88, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						product = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						product = new productStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									product.ProductID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ProductID", "product", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								rowstate_tFileInputDelimited_2.setException(new RuntimeException(
										"Value is empty for column : 'ProductID' in 'product' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							product.Name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							product.ProductNumber = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							product.Color = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							product.StandardCost = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							product.ListPrice = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							product.Size = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									product.Weight = ParserUtils.parseTo_BigDecimal(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Weight", "product", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								product.Weight = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 8;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									product.ProductCategoryID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ProductCategoryID", "product", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								product.ProductCategoryID = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 9;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									product.ProductModelID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ProductModelID", "product", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								product.ProductModelID = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 10;

							product.SellStartDate = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							product.SellEndDate = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							product.DiscontinuedDate = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							product = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "product"
						if (product != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "product");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "category"
							///////////////////////////////////////////////

							boolean forceLoopcategory = false;

							categoryStruct categoryObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								Object exprKeyValue_category__ProductCategoryID = product.ProductCategoryID;
								if (exprKeyValue_category__ProductCategoryID == null) {
									hasCasePrimitiveKeyWithNull_tMap_2 = true;
								} else {
									categoryHashKey.ProductCategoryID = (int) (Integer) exprKeyValue_category__ProductCategoryID;
								}

								categoryHashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

									tHash_Lookup_category.lookup(categoryHashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_category != null && tHash_Lookup_category.getCount(categoryHashKey) > 1) { // G
																														// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'category' and it contains more one result from keys :
								// category.ProductCategoryID = '" + categoryHashKey.ProductCategoryID + "'");
							} // G 071

							categoryStruct category = null;

							categoryStruct fromLookup_category = null;
							category = categoryDefault;

							if (tHash_Lookup_category != null && tHash_Lookup_category.hasNext()) { // G 099

								fromLookup_category = tHash_Lookup_category.next();

							} // G 099

							if (fromLookup_category != null) {
								category = fromLookup_category;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "model"
							///////////////////////////////////////////////

							boolean forceLoopmodel = false;

							modelStruct modelObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								Object exprKeyValue_model__ProductModelID = product.ProductModelID;
								if (exprKeyValue_model__ProductModelID == null) {
									hasCasePrimitiveKeyWithNull_tMap_2 = true;
								} else {
									modelHashKey.ProductModelID = (int) (Integer) exprKeyValue_model__ProductModelID;
								}

								modelHashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

									tHash_Lookup_model.lookup(modelHashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_model != null && tHash_Lookup_model.getCount(modelHashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'model' and it contains more one result from keys : model.ProductModelID = '"
								// + modelHashKey.ProductModelID + "'");
							} // G 071

							modelStruct model = null;

							modelStruct fromLookup_model = null;
							model = modelDefault;

							if (tHash_Lookup_model != null && tHash_Lookup_model.hasNext()) { // G 099

								fromLookup_model = tHash_Lookup_model.next();

							} // G 099

							if (fromLookup_model != null) {
								model = fromLookup_model;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								produto = null;

// # Output table : 'produto'
								produto_tmp.ProductID = product.ProductID;
								produto_tmp.Name = product.Name;
								produto_tmp.Category = category.Name;
								produto_tmp.Model = model.Name;
								produto_tmp.ProductNumber = product.ProductNumber;
								produto_tmp.Color = product.Color;
								produto_tmp.StandardCost = product.StandardCost;
								produto_tmp.ListPrice = product.ListPrice;
								produto_tmp.Size = product.Size;
								produto_tmp.Weight = product.Weight;
								produto_tmp.SellStartDate = product.SellStartDate;
								produto_tmp.SellEndDate = product.SellEndDate;
								produto_tmp.DiscontinuedDate = product.DiscontinuedDate;
								produto = produto_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "produto"
							if (produto != null) {

								/**
								 * [tFileOutputDelimited_3 main ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "produto");
								}

								StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
								sb_tFileOutputDelimited_3.append(FormatterUtils.format_Number(
										new java.math.BigDecimal(String.valueOf(produto.ProductID)).toPlainString(),
										'.', ','));
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.Name != null) {
									sb_tFileOutputDelimited_3.append(produto.Name);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.Category != null) {
									sb_tFileOutputDelimited_3.append(produto.Category);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.Model != null) {
									sb_tFileOutputDelimited_3.append(produto.Model);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.ProductNumber != null) {
									sb_tFileOutputDelimited_3.append(produto.ProductNumber);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.Color != null) {
									sb_tFileOutputDelimited_3.append(produto.Color);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.StandardCost != null) {
									sb_tFileOutputDelimited_3.append(produto.StandardCost);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.ListPrice != null) {
									sb_tFileOutputDelimited_3.append(produto.ListPrice);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.Size != null) {
									sb_tFileOutputDelimited_3.append(produto.Size);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.Weight != null) {
									sb_tFileOutputDelimited_3.append(produto.Weight);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.SellStartDate != null) {
									sb_tFileOutputDelimited_3.append(produto.SellStartDate);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.SellEndDate != null) {
									sb_tFileOutputDelimited_3.append(produto.SellEndDate);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (produto.DiscontinuedDate != null) {
									sb_tFileOutputDelimited_3.append(produto.DiscontinuedDate);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

								nb_line_tFileOutputDelimited_3++;
								resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

								outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

								tos_count_tFileOutputDelimited_3++;

								/**
								 * [tFileOutputDelimited_3 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								/**
								 * [tFileOutputDelimited_3 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								/**
								 * [tFileOutputDelimited_3 process_data_end ] stop
								 */

							} // End of branch "produto"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "product"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("D:/DataLake/Harmonized/HA_product_" + TalendDate.getDate("YYYY-MM-DD")
							+ ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_category != null) {
					tHash_Lookup_category.endGet();
				}
				globalMap.remove("tHash_Lookup_category");

				if (tHash_Lookup_model != null) {
					tHash_Lookup_model.endGet();
				}
				globalMap.remove("tHash_Lookup_model");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "product");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "produto");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_category");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_model");

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class categoryStruct implements routines.system.IPersistableComparableLookupRow<categoryStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductCategoryID;

		public int getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer ParentProductCategoryID;

		public Integer getParentProductCategoryID() {
			return this.ParentProductCategoryID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductCategoryID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final categoryStruct other = (categoryStruct) obj;

			if (this.ProductCategoryID != other.ProductCategoryID)
				return false;

			return true;
		}

		public void copyDataTo(categoryStruct other) {

			other.ProductCategoryID = this.ProductCategoryID;
			other.Name = this.Name;
			other.ParentProductCategoryID = this.ParentProductCategoryID;

		}

		public void copyKeysDataTo(categoryStruct other) {

			other.ProductCategoryID = this.ProductCategoryID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.ProductCategoryID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductCategoryID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.ParentProductCategoryID = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeInteger(this.ParentProductCategoryID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",Name=" + Name);
			sb.append(",ParentProductCategoryID=" + String.valueOf(ParentProductCategoryID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(categoryStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductCategoryID, other.ProductCategoryID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				categoryStruct category = new categoryStruct();

				/**
				 * [tAdvancedHash_category begin ] start
				 */

				ok_Hash.put("tAdvancedHash_category", false);
				start_Hash.put("tAdvancedHash_category", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_category";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "category");
				}

				int tos_count_tAdvancedHash_category = 0;

				// connection name:category
				// source node:tFileInputDelimited_3 - inputs:(after_tFileInputDelimited_2)
				// outputs:(category,category) | target node:tAdvancedHash_category -
				// inputs:(category) outputs:()
				// linked node: tMap_2 - inputs:(product,category,model) outputs:(produto)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_category = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<categoryStruct> tHash_Lookup_category = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<categoryStruct>getLookup(matchingModeEnum_category);

				globalMap.put("tHash_Lookup_category", tHash_Lookup_category);

				/**
				 * [tAdvancedHash_category begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "D:/DataLake/Harmonized/HA_productCategory_"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"D:/DataLake/Harmonized/HA_productCategory_" + TalendDate.getDate("YYYY-MM-DD")
										+ ".csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						category = null;

						category = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						category = new categoryStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									category.ProductCategoryID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ProductCategoryID", "category", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								rowstate_tFileInputDelimited_3.setException(new RuntimeException(
										"Value is empty for column : 'ProductCategoryID' in 'category' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							category.Name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									category.ParentProductCategoryID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ParentProductCategoryID", "category", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								category.ParentProductCategoryID = null;

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							category = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "category"
						if (category != null) {

							/**
							 * [tAdvancedHash_category main ] start
							 */

							currentComponent = "tAdvancedHash_category";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "category");
							}

							categoryStruct category_HashRow = new categoryStruct();

							category_HashRow.ProductCategoryID = category.ProductCategoryID;

							category_HashRow.Name = category.Name;

							category_HashRow.ParentProductCategoryID = category.ParentProductCategoryID;

							tHash_Lookup_category.put(category_HashRow);

							tos_count_tAdvancedHash_category++;

							/**
							 * [tAdvancedHash_category main ] stop
							 */

							/**
							 * [tAdvancedHash_category process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_category";

							/**
							 * [tAdvancedHash_category process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_category process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_category";

							/**
							 * [tAdvancedHash_category process_data_end ] stop
							 */

						} // End of branch "category"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("D:/DataLake/Harmonized/HA_productCategory_" + TalendDate.getDate("YYYY-MM-DD")
							+ ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_category end ] start
				 */

				currentComponent = "tAdvancedHash_category";

				tHash_Lookup_category.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "category");
				}

				ok_Hash.put("tAdvancedHash_category", true);
				end_Hash.put("tAdvancedHash_category", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_category end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_category finally ] start
				 */

				currentComponent = "tAdvancedHash_category";

				/**
				 * [tAdvancedHash_category finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class modelStruct implements routines.system.IPersistableComparableLookupRow<modelStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductModelID;

		public int getProductModelID() {
			return this.ProductModelID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CatalogDescription;

		public String getCatalogDescription() {
			return this.CatalogDescription;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductModelID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final modelStruct other = (modelStruct) obj;

			if (this.ProductModelID != other.ProductModelID)
				return false;

			return true;
		}

		public void copyDataTo(modelStruct other) {

			other.ProductModelID = this.ProductModelID;
			other.Name = this.Name;
			other.CatalogDescription = this.CatalogDescription;

		}

		public void copyKeysDataTo(modelStruct other) {

			other.ProductModelID = this.ProductModelID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.ProductModelID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductModelID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.CatalogDescription = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.CatalogDescription, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",Name=" + Name);
			sb.append(",CatalogDescription=" + CatalogDescription);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(modelStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				modelStruct model = new modelStruct();

				/**
				 * [tAdvancedHash_model begin ] start
				 */

				ok_Hash.put("tAdvancedHash_model", false);
				start_Hash.put("tAdvancedHash_model", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_model";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "model");
				}

				int tos_count_tAdvancedHash_model = 0;

				// connection name:model
				// source node:tFileInputDelimited_4 - inputs:(after_tFileInputDelimited_2)
				// outputs:(model,model) | target node:tAdvancedHash_model - inputs:(model)
				// outputs:()
				// linked node: tMap_2 - inputs:(product,category,model) outputs:(produto)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_model = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<modelStruct> tHash_Lookup_model = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<modelStruct>getLookup(matchingModeEnum_model);

				globalMap.put("tHash_Lookup_model", tHash_Lookup_model);

				/**
				 * [tAdvancedHash_model begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "D:/DataLake/Harmonized/HA_productModel_"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"D:/DataLake/Harmonized/HA_productModel_" + TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						model = null;

						model = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						model = new modelStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_4 = 0;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									model.ProductModelID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ProductModelID", "model", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								rowstate_tFileInputDelimited_4.setException(new RuntimeException(
										"Value is empty for column : 'ProductModelID' in 'model' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_4 = 1;

							model.Name = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							model.CatalogDescription = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							model = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "model"
						if (model != null) {

							/**
							 * [tAdvancedHash_model main ] start
							 */

							currentComponent = "tAdvancedHash_model";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "model");
							}

							modelStruct model_HashRow = new modelStruct();

							model_HashRow.ProductModelID = model.ProductModelID;

							model_HashRow.Name = model.Name;

							model_HashRow.CatalogDescription = model.CatalogDescription;

							tHash_Lookup_model.put(model_HashRow);

							tos_count_tAdvancedHash_model++;

							/**
							 * [tAdvancedHash_model main ] stop
							 */

							/**
							 * [tAdvancedHash_model process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_model";

							/**
							 * [tAdvancedHash_model process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_model process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_model";

							/**
							 * [tAdvancedHash_model process_data_end ] stop
							 */

						} // End of branch "model"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("D:/DataLake/Harmonized/HA_productModel_" + TalendDate.getDate("YYYY-MM-DD")
							+ ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_model end ] start
				 */

				currentComponent = "tAdvancedHash_model";

				tHash_Lookup_model.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "model");
				}

				ok_Hash.put("tAdvancedHash_model", true);
				end_Hash.put("tAdvancedHash_model", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_model end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_model finally ] start
				 */

				currentComponent = "tAdvancedHash_model";

				/**
				 * [tAdvancedHash_model finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class SalesStruct implements routines.system.IPersistableRow<SalesStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public String OrderDate;

		public String getOrderDate() {
			return this.OrderDate;
		}

		public String DueDate;

		public String getDueDate() {
			return this.DueDate;
		}

		public String ShipDate;

		public String getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public boolean OnlineOrderFlag;

		public boolean getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public String PurchaseOrderNumber;

		public String getPurchaseOrderNumber() {
			return this.PurchaseOrderNumber;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String CustomerName;

		public String getCustomerName() {
			return this.CustomerName;
		}

		public String ShipAddressLine1;

		public String getShipAddressLine1() {
			return this.ShipAddressLine1;
		}

		public String ShipAddressLine2;

		public String getShipAddressLine2() {
			return this.ShipAddressLine2;
		}

		public String ShipStateProvince;

		public String getShipStateProvince() {
			return this.ShipStateProvince;
		}

		public String ShipCountryRegion;

		public String getShipCountryRegion() {
			return this.ShipCountryRegion;
		}

		public String ShipCity;

		public String getShipCity() {
			return this.ShipCity;
		}

		public String ShipPostalCode;

		public String getShipPostalCode() {
			return this.ShipPostalCode;
		}

		public String BillAddressLine1;

		public String getBillAddressLine1() {
			return this.BillAddressLine1;
		}

		public String BillAddressLine2;

		public String getBillAddressLine2() {
			return this.BillAddressLine2;
		}

		public String BillStateProvince;

		public String getBillStateProvince() {
			return this.BillStateProvince;
		}

		public String BillCountryRegion;

		public String getBillCountryRegion() {
			return this.BillCountryRegion;
		}

		public String BillCity;

		public String getBillCity() {
			return this.BillCity;
		}

		public String BillPostalCode;

		public String getBillPostalCode() {
			return this.BillPostalCode;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public Object TotalDue;

		public Object getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_INGESTAODADOS_JobExportDS.length) {
					if (length < 1024 && commonByteArray_INGESTAODADOS_JobExportDS.length == 0) {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[1024];
					} else {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_INGESTAODADOS_JobExportDS, 0, length);
				strReturn = new String(commonByteArray_INGESTAODADOS_JobExportDS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readString(dis);

					this.DueDate = readString(dis);

					this.ShipDate = readString(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = dis.readBoolean();

					this.SalesOrderNumber = readString(dis);

					this.PurchaseOrderNumber = readString(dis);

					this.AccountNumber = readString(dis);

					this.CustomerName = readString(dis);

					this.ShipAddressLine1 = readString(dis);

					this.ShipAddressLine2 = readString(dis);

					this.ShipStateProvince = readString(dis);

					this.ShipCountryRegion = readString(dis);

					this.ShipCity = readString(dis);

					this.ShipPostalCode = readString(dis);

					this.BillAddressLine1 = readString(dis);

					this.BillAddressLine2 = readString(dis);

					this.BillStateProvince = readString(dis);

					this.BillCountryRegion = readString(dis);

					this.BillCity = readString(dis);

					this.BillPostalCode = readString(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// String

				writeString(this.OrderDate, dos);

				// String

				writeString(this.DueDate, dos);

				// String

				writeString(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// boolean

				dos.writeBoolean(this.OnlineOrderFlag);

				// String

				writeString(this.SalesOrderNumber, dos);

				// String

				writeString(this.PurchaseOrderNumber, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.CustomerName, dos);

				// String

				writeString(this.ShipAddressLine1, dos);

				// String

				writeString(this.ShipAddressLine2, dos);

				// String

				writeString(this.ShipStateProvince, dos);

				// String

				writeString(this.ShipCountryRegion, dos);

				// String

				writeString(this.ShipCity, dos);

				// String

				writeString(this.ShipPostalCode, dos);

				// String

				writeString(this.BillAddressLine1, dos);

				// String

				writeString(this.BillAddressLine2, dos);

				// String

				writeString(this.BillStateProvince, dos);

				// String

				writeString(this.BillCountryRegion, dos);

				// String

				writeString(this.BillCity, dos);

				// String

				writeString(this.BillPostalCode, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// Object

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + OrderDate);
			sb.append(",DueDate=" + DueDate);
			sb.append(",ShipDate=" + ShipDate);
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",PurchaseOrderNumber=" + PurchaseOrderNumber);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",CustomerName=" + CustomerName);
			sb.append(",ShipAddressLine1=" + ShipAddressLine1);
			sb.append(",ShipAddressLine2=" + ShipAddressLine2);
			sb.append(",ShipStateProvince=" + ShipStateProvince);
			sb.append(",ShipCountryRegion=" + ShipCountryRegion);
			sb.append(",ShipCity=" + ShipCity);
			sb.append(",ShipPostalCode=" + ShipPostalCode);
			sb.append(",BillAddressLine1=" + BillAddressLine1);
			sb.append(",BillAddressLine2=" + BillAddressLine2);
			sb.append(",BillStateProvince=" + BillStateProvince);
			sb.append(",BillCountryRegion=" + BillCountryRegion);
			sb.append(",BillCity=" + BillCity);
			sb.append(",BillPostalCode=" + BillPostalCode);
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SalesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class salesOrderStruct implements routines.system.IPersistableRow<salesOrderStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public String OrderDate;

		public String getOrderDate() {
			return this.OrderDate;
		}

		public String DueDate;

		public String getDueDate() {
			return this.DueDate;
		}

		public String ShipDate;

		public String getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public boolean OnlineOrderFlag;

		public boolean getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public String PurchaseOrderNumber;

		public String getPurchaseOrderNumber() {
			return this.PurchaseOrderNumber;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public Object TotalDue;

		public Object getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_INGESTAODADOS_JobExportDS.length) {
					if (length < 1024 && commonByteArray_INGESTAODADOS_JobExportDS.length == 0) {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[1024];
					} else {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_INGESTAODADOS_JobExportDS, 0, length);
				strReturn = new String(commonByteArray_INGESTAODADOS_JobExportDS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readString(dis);

					this.DueDate = readString(dis);

					this.ShipDate = readString(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = dis.readBoolean();

					this.SalesOrderNumber = readString(dis);

					this.PurchaseOrderNumber = readString(dis);

					this.AccountNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// String

				writeString(this.OrderDate, dos);

				// String

				writeString(this.DueDate, dos);

				// String

				writeString(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// boolean

				dos.writeBoolean(this.OnlineOrderFlag);

				// String

				writeString(this.SalesOrderNumber, dos);

				// String

				writeString(this.PurchaseOrderNumber, dos);

				// String

				writeString(this.AccountNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// Object

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + OrderDate);
			sb.append(",DueDate=" + DueDate);
			sb.append(",ShipDate=" + ShipDate);
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",PurchaseOrderNumber=" + PurchaseOrderNumber);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(salesOrderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_5Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_5Struct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public String OrderDate;

		public String getOrderDate() {
			return this.OrderDate;
		}

		public String DueDate;

		public String getDueDate() {
			return this.DueDate;
		}

		public String ShipDate;

		public String getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public boolean OnlineOrderFlag;

		public boolean getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public String PurchaseOrderNumber;

		public String getPurchaseOrderNumber() {
			return this.PurchaseOrderNumber;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public Object TotalDue;

		public Object getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_INGESTAODADOS_JobExportDS.length) {
					if (length < 1024 && commonByteArray_INGESTAODADOS_JobExportDS.length == 0) {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[1024];
					} else {
						commonByteArray_INGESTAODADOS_JobExportDS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_INGESTAODADOS_JobExportDS, 0, length);
				strReturn = new String(commonByteArray_INGESTAODADOS_JobExportDS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readString(dis);

					this.DueDate = readString(dis);

					this.ShipDate = readString(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = dis.readBoolean();

					this.SalesOrderNumber = readString(dis);

					this.PurchaseOrderNumber = readString(dis);

					this.AccountNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// String

				writeString(this.OrderDate, dos);

				// String

				writeString(this.DueDate, dos);

				// String

				writeString(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// boolean

				dos.writeBoolean(this.OnlineOrderFlag);

				// String

				writeString(this.SalesOrderNumber, dos);

				// String

				writeString(this.PurchaseOrderNumber, dos);

				// String

				writeString(this.AccountNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// Object

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + OrderDate);
			sb.append(",DueDate=" + DueDate);
			sb.append(",ShipDate=" + ShipDate);
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",PurchaseOrderNumber=" + PurchaseOrderNumber);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_6Process(globalMap);
				tFileInputDelimited_7Process(globalMap);
				tFileInputDelimited_8Process(globalMap);

				salesOrderStruct salesOrder = new salesOrderStruct();
				SalesStruct Sales = new SalesStruct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Sales");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"D:/DataLake/Curated/DC_sales_" + TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("SalesOrderID");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("RevisionNumber");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("OrderDate");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DueDate");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ShipDate");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Status");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("OnlineOrderFlag");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("SalesOrderNumber");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("PurchaseOrderNumber");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("AccountNumber");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("CustomerName");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ShipAddressLine1");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ShipAddressLine2");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ShipStateProvince");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ShipCountryRegion");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ShipCity");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ShipPostalCode");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("BillAddressLine1");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("BillAddressLine2");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("BillStateProvince");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("BillCountryRegion");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("BillCity");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("BillPostalCode");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ShipMethod");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("CreditCardApprovalCode");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("SubTotal");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("TaxAmt");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Freight");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("TotalDue");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "salesOrder");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customerStruct> tHash_Lookup_customer = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customerStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customerStruct>) globalMap
						.get("tHash_Lookup_customer"));

				customerStruct customerHashKey = new customerStruct();
				customerStruct customerDefault = new customerStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<addressShipStruct> tHash_Lookup_addressShip = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<addressShipStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<addressShipStruct>) globalMap
						.get("tHash_Lookup_addressShip"));

				addressShipStruct addressShipHashKey = new addressShipStruct();
				addressShipStruct addressShipDefault = new addressShipStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<addressBILLStruct> tHash_Lookup_addressBILL = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<addressBILLStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<addressBILLStruct>) globalMap
						.get("tHash_Lookup_addressBILL"));

				addressBILLStruct addressBILLHashKey = new addressBILLStruct();
				addressBILLStruct addressBILLDefault = new addressBILLStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SalesStruct Sales_tmp = new SalesStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try {

					Object filename_tFileInputDelimited_5 = "D:/DataLake/Harmonized/HA_salesOrderHeader_"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = 10;
						if (footer_value_tFileInputDelimited_5 > 0 || random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"D:/DataLake/Harmonized/HA_salesOrderHeader_" + TalendDate.getDate("YYYY-MM-DD")
										+ ".csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_5, 10, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						salesOrder = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						salesOrder = new salesOrderStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_5 = 0;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									salesOrder.SalesOrderID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"SalesOrderID", "salesOrder", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								rowstate_tFileInputDelimited_5.setException(new RuntimeException(
										"Value is empty for column : 'SalesOrderID' in 'salesOrder' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_5 = 1;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									salesOrder.RevisionNumber = ParserUtils.parseTo_short(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"RevisionNumber", "salesOrder", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								rowstate_tFileInputDelimited_5.setException(new RuntimeException(
										"Value is empty for column : 'RevisionNumber' in 'salesOrder' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_5 = 2;

							salesOrder.OrderDate = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 3;

							salesOrder.DueDate = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 4;

							salesOrder.ShipDate = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 5;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									salesOrder.Status = ParserUtils.parseTo_short(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Status", "salesOrder", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								rowstate_tFileInputDelimited_5.setException(new RuntimeException(
										"Value is empty for column : 'Status' in 'salesOrder' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_5 = 6;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									salesOrder.OnlineOrderFlag = ParserUtils.parseTo_boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"OnlineOrderFlag", "salesOrder", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								rowstate_tFileInputDelimited_5.setException(new RuntimeException(
										"Value is empty for column : 'OnlineOrderFlag' in 'salesOrder' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_5 = 7;

							salesOrder.SalesOrderNumber = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 8;

							salesOrder.PurchaseOrderNumber = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 9;

							salesOrder.AccountNumber = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 10;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									salesOrder.CustomerID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CustomerID", "salesOrder", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								rowstate_tFileInputDelimited_5.setException(new RuntimeException(
										"Value is empty for column : 'CustomerID' in 'salesOrder' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_5 = 11;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									salesOrder.ShipToAddressID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ShipToAddressID", "salesOrder", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								salesOrder.ShipToAddressID = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 12;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									salesOrder.BillToAddressID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"BillToAddressID", "salesOrder", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								salesOrder.BillToAddressID = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 13;

							salesOrder.ShipMethod = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 14;

							salesOrder.CreditCardApprovalCode = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 15;

							salesOrder.SubTotal = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 16;

							salesOrder.TaxAmt = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 17;

							salesOrder.Freight = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 18;

							salesOrder.TotalDue = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							salesOrder = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
// Start of branch "salesOrder"
						if (salesOrder != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "salesOrder");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "customer"
							///////////////////////////////////////////////

							boolean forceLoopcustomer = false;

							customerStruct customerObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_3 = false;

								Object exprKeyValue_customer__CustomerID = salesOrder.CustomerID;
								if (exprKeyValue_customer__CustomerID == null) {
									hasCasePrimitiveKeyWithNull_tMap_3 = true;
								} else {
									customerHashKey.CustomerID = (int) (Integer) exprKeyValue_customer__CustomerID;
								}

								customerHashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

									tHash_Lookup_customer.lookup(customerHashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_customer != null && tHash_Lookup_customer.getCount(customerHashKey) > 1) { // G
																														// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'customer' and it contains more one result from keys : customer.CustomerID =
								// '" + customerHashKey.CustomerID + "'");
							} // G 071

							customerStruct customer = null;

							customerStruct fromLookup_customer = null;
							customer = customerDefault;

							if (tHash_Lookup_customer != null && tHash_Lookup_customer.hasNext()) { // G 099

								fromLookup_customer = tHash_Lookup_customer.next();

							} // G 099

							if (fromLookup_customer != null) {
								customer = fromLookup_customer;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "addressShip"
							///////////////////////////////////////////////

							boolean forceLoopaddressShip = false;

							addressShipStruct addressShipObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_3 = false;

								Object exprKeyValue_addressShip__AddressID = salesOrder.ShipToAddressID;
								if (exprKeyValue_addressShip__AddressID == null) {
									hasCasePrimitiveKeyWithNull_tMap_3 = true;
								} else {
									addressShipHashKey.AddressID = (int) (Integer) exprKeyValue_addressShip__AddressID;
								}

								addressShipHashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

									tHash_Lookup_addressShip.lookup(addressShipHashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_addressShip != null
									&& tHash_Lookup_addressShip.getCount(addressShipHashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'addressShip' and it contains more one result from keys :
								// addressShip.AddressID = '" + addressShipHashKey.AddressID + "'");
							} // G 071

							addressShipStruct addressShip = null;

							addressShipStruct fromLookup_addressShip = null;
							addressShip = addressShipDefault;

							if (tHash_Lookup_addressShip != null && tHash_Lookup_addressShip.hasNext()) { // G 099

								fromLookup_addressShip = tHash_Lookup_addressShip.next();

							} // G 099

							if (fromLookup_addressShip != null) {
								addressShip = fromLookup_addressShip;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "addressBILL"
							///////////////////////////////////////////////

							boolean forceLoopaddressBILL = false;

							addressBILLStruct addressBILLObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_3 = false;

								Object exprKeyValue_addressBILL__AddressID = salesOrder.BillToAddressID;
								if (exprKeyValue_addressBILL__AddressID == null) {
									hasCasePrimitiveKeyWithNull_tMap_3 = true;
								} else {
									addressBILLHashKey.AddressID = (int) (Integer) exprKeyValue_addressBILL__AddressID;
								}

								addressBILLHashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

									tHash_Lookup_addressBILL.lookup(addressBILLHashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_addressBILL != null
									&& tHash_Lookup_addressBILL.getCount(addressBILLHashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'addressBILL' and it contains more one result from keys :
								// addressBILL.AddressID = '" + addressBILLHashKey.AddressID + "'");
							} // G 071

							addressBILLStruct addressBILL = null;

							addressBILLStruct fromLookup_addressBILL = null;
							addressBILL = addressBILLDefault;

							if (tHash_Lookup_addressBILL != null && tHash_Lookup_addressBILL.hasNext()) { // G 099

								fromLookup_addressBILL = tHash_Lookup_addressBILL.next();

							} // G 099

							if (fromLookup_addressBILL != null) {
								addressBILL = fromLookup_addressBILL;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								Sales = null;

// # Output table : 'Sales'
								Sales_tmp.SalesOrderID = salesOrder.SalesOrderID;
								Sales_tmp.RevisionNumber = salesOrder.RevisionNumber;
								Sales_tmp.OrderDate = salesOrder.OrderDate;
								Sales_tmp.DueDate = salesOrder.DueDate;
								Sales_tmp.ShipDate = salesOrder.ShipDate;
								Sales_tmp.Status = salesOrder.Status;
								Sales_tmp.OnlineOrderFlag = salesOrder.OnlineOrderFlag;
								Sales_tmp.SalesOrderNumber = salesOrder.SalesOrderNumber;
								Sales_tmp.PurchaseOrderNumber = salesOrder.PurchaseOrderNumber;
								Sales_tmp.AccountNumber = salesOrder.AccountNumber;
								Sales_tmp.CustomerName = customer.FirstName + customer.MiddleName + customer.LastName;
								Sales_tmp.ShipAddressLine1 = addressShip.AddressLine1;
								Sales_tmp.ShipAddressLine2 = addressShip.AddressLine2;
								Sales_tmp.ShipStateProvince = addressShip.StateProvince;
								Sales_tmp.ShipCountryRegion = addressShip.CountryRegion;
								Sales_tmp.ShipCity = addressShip.City;
								Sales_tmp.ShipPostalCode = addressShip.PostalCode;
								Sales_tmp.BillAddressLine1 = addressBILL.AddressLine1;
								Sales_tmp.BillAddressLine2 = addressBILL.AddressLine2;
								Sales_tmp.BillStateProvince = addressBILL.StateProvince;
								Sales_tmp.BillCountryRegion = addressBILL.CountryRegion;
								Sales_tmp.BillCity = addressBILL.City;
								Sales_tmp.BillPostalCode = addressBILL.PostalCode;
								Sales_tmp.ShipMethod = salesOrder.ShipMethod;
								Sales_tmp.CreditCardApprovalCode = salesOrder.CreditCardApprovalCode;
								Sales_tmp.SubTotal = salesOrder.SubTotal;
								Sales_tmp.TaxAmt = salesOrder.TaxAmt;
								Sales_tmp.Freight = salesOrder.Freight;
								Sales_tmp.TotalDue = salesOrder.TotalDue;
								Sales = Sales_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */

							/**
							 * [tMap_3 process_data_begin ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_begin ] stop
							 */
// Start of branch "Sales"
							if (Sales != null) {

								/**
								 * [tFileOutputDelimited_4 main ] start
								 */

								currentComponent = "tFileOutputDelimited_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "Sales");
								}

								StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
								sb_tFileOutputDelimited_4.append(Sales.SalesOrderID);
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								sb_tFileOutputDelimited_4.append(Sales.RevisionNumber);
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.OrderDate != null) {
									sb_tFileOutputDelimited_4.append(Sales.OrderDate);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.DueDate != null) {
									sb_tFileOutputDelimited_4.append(Sales.DueDate);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.ShipDate != null) {
									sb_tFileOutputDelimited_4.append(Sales.ShipDate);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								sb_tFileOutputDelimited_4.append(Sales.Status);
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								sb_tFileOutputDelimited_4.append(Sales.OnlineOrderFlag);
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.SalesOrderNumber != null) {
									sb_tFileOutputDelimited_4.append(Sales.SalesOrderNumber);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.PurchaseOrderNumber != null) {
									sb_tFileOutputDelimited_4.append(Sales.PurchaseOrderNumber);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.AccountNumber != null) {
									sb_tFileOutputDelimited_4.append(Sales.AccountNumber);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.CustomerName != null) {
									sb_tFileOutputDelimited_4.append(Sales.CustomerName);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.ShipAddressLine1 != null) {
									sb_tFileOutputDelimited_4.append(Sales.ShipAddressLine1);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.ShipAddressLine2 != null) {
									sb_tFileOutputDelimited_4.append(Sales.ShipAddressLine2);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.ShipStateProvince != null) {
									sb_tFileOutputDelimited_4.append(Sales.ShipStateProvince);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.ShipCountryRegion != null) {
									sb_tFileOutputDelimited_4.append(Sales.ShipCountryRegion);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.ShipCity != null) {
									sb_tFileOutputDelimited_4.append(Sales.ShipCity);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.ShipPostalCode != null) {
									sb_tFileOutputDelimited_4.append(Sales.ShipPostalCode);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.BillAddressLine1 != null) {
									sb_tFileOutputDelimited_4.append(Sales.BillAddressLine1);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.BillAddressLine2 != null) {
									sb_tFileOutputDelimited_4.append(Sales.BillAddressLine2);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.BillStateProvince != null) {
									sb_tFileOutputDelimited_4.append(Sales.BillStateProvince);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.BillCountryRegion != null) {
									sb_tFileOutputDelimited_4.append(Sales.BillCountryRegion);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.BillCity != null) {
									sb_tFileOutputDelimited_4.append(Sales.BillCity);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.BillPostalCode != null) {
									sb_tFileOutputDelimited_4.append(Sales.BillPostalCode);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.ShipMethod != null) {
									sb_tFileOutputDelimited_4.append(Sales.ShipMethod);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.CreditCardApprovalCode != null) {
									sb_tFileOutputDelimited_4.append(Sales.CreditCardApprovalCode);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.SubTotal != null) {
									sb_tFileOutputDelimited_4.append(Sales.SubTotal);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.TaxAmt != null) {
									sb_tFileOutputDelimited_4.append(Sales.TaxAmt);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.Freight != null) {
									sb_tFileOutputDelimited_4.append(Sales.Freight);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (Sales.TotalDue != null) {
									sb_tFileOutputDelimited_4.append(Sales.TotalDue);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

								nb_line_tFileOutputDelimited_4++;
								resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

								outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

								tos_count_tFileOutputDelimited_4++;

								/**
								 * [tFileOutputDelimited_4 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_4 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_4";

								/**
								 * [tFileOutputDelimited_4 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_4 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_4";

								/**
								 * [tFileOutputDelimited_4 process_data_end ] stop
								 */

							} // End of branch "Sales"

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

						} // End of branch "salesOrder"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("D:/DataLake/Harmonized/HA_salesOrderHeader_" + TalendDate.getDate("YYYY-MM-DD")
							+ ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_customer != null) {
					tHash_Lookup_customer.endGet();
				}
				globalMap.remove("tHash_Lookup_customer");

				if (tHash_Lookup_addressShip != null) {
					tHash_Lookup_addressShip.endGet();
				}
				globalMap.remove("tHash_Lookup_addressShip");

				if (tHash_Lookup_addressBILL != null) {
					tHash_Lookup_addressBILL.endGet();
				}
				globalMap.remove("tHash_Lookup_addressBILL");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "salesOrder");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Sales");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_addressShip");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_customer");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_addressBILL");

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class addressShipStruct
			implements routines.system.IPersistableComparableLookupRow<addressShipStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.AddressID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final addressShipStruct other = (addressShipStruct) obj;

			if (this.AddressID != other.AddressID)
				return false;

			return true;
		}

		public void copyDataTo(addressShipStruct other) {

			other.AddressID = this.AddressID;
			other.AddressLine1 = this.AddressLine1;
			other.AddressLine2 = this.AddressLine2;
			other.StateProvince = this.StateProvince;
			other.CountryRegion = this.CountryRegion;
			other.City = this.City;
			other.PostalCode = this.PostalCode;

		}

		public void copyKeysDataTo(addressShipStruct other) {

			other.AddressID = this.AddressID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.AddressID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.AddressID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AddressLine1 = readString(dis, ois);

				this.AddressLine2 = readString(dis, ois);

				this.StateProvince = readString(dis, ois);

				this.CountryRegion = readString(dis, ois);

				this.City = readString(dis, ois);

				this.PostalCode = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.AddressLine1, dos, oos);

				writeString(this.AddressLine2, dos, oos);

				writeString(this.StateProvince, dos, oos);

				writeString(this.CountryRegion, dos, oos);

				writeString(this.City, dos, oos);

				writeString(this.PostalCode, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AddressID=" + String.valueOf(AddressID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",City=" + City);
			sb.append(",PostalCode=" + PostalCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(addressShipStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				addressShipStruct addressShip = new addressShipStruct();

				/**
				 * [tAdvancedHash_addressShip begin ] start
				 */

				ok_Hash.put("tAdvancedHash_addressShip", false);
				start_Hash.put("tAdvancedHash_addressShip", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_addressShip";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "addressShip");
				}

				int tos_count_tAdvancedHash_addressShip = 0;

				// connection name:addressShip
				// source node:tFileInputDelimited_6 - inputs:(after_tFileInputDelimited_5)
				// outputs:(addressShip,addressShip) | target node:tAdvancedHash_addressShip -
				// inputs:(addressShip) outputs:()
				// linked node: tMap_3 - inputs:(salesOrder,addressShip,customer,addressBILL)
				// outputs:(Sales)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_addressShip = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<addressShipStruct> tHash_Lookup_addressShip = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<addressShipStruct>getLookup(matchingModeEnum_addressShip);

				globalMap.put("tHash_Lookup_addressShip", tHash_Lookup_addressShip);

				/**
				 * [tAdvancedHash_addressShip begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try {

					Object filename_tFileInputDelimited_6 = "D:/DataLake/Harmonized/HA_address_"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
						if (footer_value_tFileInputDelimited_6 > 0 || random_value_tFileInputDelimited_6 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
								"D:/DataLake/Harmonized/HA_address_" + TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_6, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_6 != null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();

						addressShip = null;

						addressShip = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						addressShip = new addressShipStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_6 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_6 = 0;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									addressShip.AddressID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"AddressID", "addressShip", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								rowstate_tFileInputDelimited_6.setException(new RuntimeException(
										"Value is empty for column : 'AddressID' in 'addressShip' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_6 = 1;

							addressShip.AddressLine1 = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 2;

							addressShip.AddressLine2 = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 3;

							addressShip.StateProvince = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 4;

							addressShip.CountryRegion = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 5;

							addressShip.City = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 6;

							addressShip.PostalCode = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							if (rowstate_tFileInputDelimited_6.getException() != null) {
								throw rowstate_tFileInputDelimited_6.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							addressShip = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */

						/**
						 * [tFileInputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_begin ] stop
						 */
// Start of branch "addressShip"
						if (addressShip != null) {

							/**
							 * [tAdvancedHash_addressShip main ] start
							 */

							currentComponent = "tAdvancedHash_addressShip";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "addressShip");
							}

							addressShipStruct addressShip_HashRow = new addressShipStruct();

							addressShip_HashRow.AddressID = addressShip.AddressID;

							addressShip_HashRow.AddressLine1 = addressShip.AddressLine1;

							addressShip_HashRow.AddressLine2 = addressShip.AddressLine2;

							addressShip_HashRow.StateProvince = addressShip.StateProvince;

							addressShip_HashRow.CountryRegion = addressShip.CountryRegion;

							addressShip_HashRow.City = addressShip.City;

							addressShip_HashRow.PostalCode = addressShip.PostalCode;

							tHash_Lookup_addressShip.put(addressShip_HashRow);

							tos_count_tAdvancedHash_addressShip++;

							/**
							 * [tAdvancedHash_addressShip main ] stop
							 */

							/**
							 * [tAdvancedHash_addressShip process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_addressShip";

							/**
							 * [tAdvancedHash_addressShip process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_addressShip process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_addressShip";

							/**
							 * [tAdvancedHash_addressShip process_data_end ] stop
							 */

						} // End of branch "addressShip"

						/**
						 * [tFileInputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

					}
				} finally {
					if (!((Object) ("D:/DataLake/Harmonized/HA_address_" + TalendDate.getDate("YYYY-MM-DD")
							+ ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_6 != null) {
							fid_tFileInputDelimited_6.close();
						}
					}
					if (fid_tFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_addressShip end ] start
				 */

				currentComponent = "tAdvancedHash_addressShip";

				tHash_Lookup_addressShip.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "addressShip");
				}

				ok_Hash.put("tAdvancedHash_addressShip", true);
				end_Hash.put("tAdvancedHash_addressShip", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_addressShip end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_addressShip finally ] start
				 */

				currentComponent = "tAdvancedHash_addressShip";

				/**
				 * [tAdvancedHash_addressShip finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class customerStruct implements routines.system.IPersistableComparableLookupRow<customerStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public boolean NameStyle;

		public boolean getNameStyle() {
			return this.NameStyle;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final customerStruct other = (customerStruct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			return true;
		}

		public void copyDataTo(customerStruct other) {

			other.CustomerID = this.CustomerID;
			other.NameStyle = this.NameStyle;
			other.Title = this.Title;
			other.FirstName = this.FirstName;
			other.MiddleName = this.MiddleName;
			other.LastName = this.LastName;
			other.Suffix = this.Suffix;
			other.CompanyName = this.CompanyName;
			other.SalesPerson = this.SalesPerson;
			other.EmailAddress = this.EmailAddress;
			other.Phone = this.Phone;

		}

		public void copyKeysDataTo(customerStruct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.NameStyle = dis.readBoolean();

				this.Title = readString(dis, ois);

				this.FirstName = readString(dis, ois);

				this.MiddleName = readString(dis, ois);

				this.LastName = readString(dis, ois);

				this.Suffix = readString(dis, ois);

				this.CompanyName = readString(dis, ois);

				this.SalesPerson = readString(dis, ois);

				this.EmailAddress = readString(dis, ois);

				this.Phone = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeBoolean(this.NameStyle);

				writeString(this.Title, dos, oos);

				writeString(this.FirstName, dos, oos);

				writeString(this.MiddleName, dos, oos);

				writeString(this.LastName, dos, oos);

				writeString(this.Suffix, dos, oos);

				writeString(this.CompanyName, dos, oos);

				writeString(this.SalesPerson, dos, oos);

				writeString(this.EmailAddress, dos, oos);

				writeString(this.Phone, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",NameStyle=" + String.valueOf(NameStyle));
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(customerStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				customerStruct customer = new customerStruct();

				/**
				 * [tAdvancedHash_customer begin ] start
				 */

				ok_Hash.put("tAdvancedHash_customer", false);
				start_Hash.put("tAdvancedHash_customer", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_customer";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "customer");
				}

				int tos_count_tAdvancedHash_customer = 0;

				// connection name:customer
				// source node:tFileInputDelimited_7 - inputs:(after_tFileInputDelimited_5)
				// outputs:(customer,customer) | target node:tAdvancedHash_customer -
				// inputs:(customer) outputs:()
				// linked node: tMap_3 - inputs:(salesOrder,addressShip,customer,addressBILL)
				// outputs:(Sales)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_customer = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customerStruct> tHash_Lookup_customer = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<customerStruct>getLookup(matchingModeEnum_customer);

				globalMap.put("tHash_Lookup_customer", tHash_Lookup_customer);

				/**
				 * [tAdvancedHash_customer begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try {

					Object filename_tFileInputDelimited_7 = "D:/DataLake/Harmonized/HA_customer_"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0 || random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								"D:/DataLake/Harmonized/HA_customer_" + TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_7, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();

						customer = null;

						customer = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						customer = new customerStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_7 = 0;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									customer.CustomerID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CustomerID", "customer", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								rowstate_tFileInputDelimited_7.setException(new RuntimeException(
										"Value is empty for column : 'CustomerID' in 'customer' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_7 = 1;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									customer.NameStyle = ParserUtils.parseTo_boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NameStyle", "customer", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								rowstate_tFileInputDelimited_7.setException(new RuntimeException(
										"Value is empty for column : 'NameStyle' in 'customer' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_7 = 2;

							customer.Title = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 3;

							customer.FirstName = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 4;

							customer.MiddleName = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 5;

							customer.LastName = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 6;

							customer.Suffix = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 7;

							customer.CompanyName = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 8;

							customer.SalesPerson = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 9;

							customer.EmailAddress = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 10;

							customer.Phone = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							if (rowstate_tFileInputDelimited_7.getException() != null) {
								throw rowstate_tFileInputDelimited_7.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							customer = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */

						/**
						 * [tFileInputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_begin ] stop
						 */
// Start of branch "customer"
						if (customer != null) {

							/**
							 * [tAdvancedHash_customer main ] start
							 */

							currentComponent = "tAdvancedHash_customer";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "customer");
							}

							customerStruct customer_HashRow = new customerStruct();

							customer_HashRow.CustomerID = customer.CustomerID;

							customer_HashRow.NameStyle = customer.NameStyle;

							customer_HashRow.Title = customer.Title;

							customer_HashRow.FirstName = customer.FirstName;

							customer_HashRow.MiddleName = customer.MiddleName;

							customer_HashRow.LastName = customer.LastName;

							customer_HashRow.Suffix = customer.Suffix;

							customer_HashRow.CompanyName = customer.CompanyName;

							customer_HashRow.SalesPerson = customer.SalesPerson;

							customer_HashRow.EmailAddress = customer.EmailAddress;

							customer_HashRow.Phone = customer.Phone;

							tHash_Lookup_customer.put(customer_HashRow);

							tos_count_tAdvancedHash_customer++;

							/**
							 * [tAdvancedHash_customer main ] stop
							 */

							/**
							 * [tAdvancedHash_customer process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_customer";

							/**
							 * [tAdvancedHash_customer process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_customer process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_customer";

							/**
							 * [tAdvancedHash_customer process_data_end ] stop
							 */

						} // End of branch "customer"

						/**
						 * [tFileInputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) ("D:/DataLake/Harmonized/HA_customer_" + TalendDate.getDate("YYYY-MM-DD")
							+ ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_customer end ] start
				 */

				currentComponent = "tAdvancedHash_customer";

				tHash_Lookup_customer.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "customer");
				}

				ok_Hash.put("tAdvancedHash_customer", true);
				end_Hash.put("tAdvancedHash_customer", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_customer end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_customer finally ] start
				 */

				currentComponent = "tAdvancedHash_customer";

				/**
				 * [tAdvancedHash_customer finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class addressBILLStruct
			implements routines.system.IPersistableComparableLookupRow<addressBILLStruct> {
		final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportDS = new byte[0];
		static byte[] commonByteArray_INGESTAODADOS_JobExportDS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.AddressID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final addressBILLStruct other = (addressBILLStruct) obj;

			if (this.AddressID != other.AddressID)
				return false;

			return true;
		}

		public void copyDataTo(addressBILLStruct other) {

			other.AddressID = this.AddressID;
			other.AddressLine1 = this.AddressLine1;
			other.AddressLine2 = this.AddressLine2;
			other.StateProvince = this.StateProvince;
			other.CountryRegion = this.CountryRegion;
			other.City = this.City;
			other.PostalCode = this.PostalCode;

		}

		public void copyKeysDataTo(addressBILLStruct other) {

			other.AddressID = this.AddressID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_INGESTAODADOS_JobExportDS) {

				try {

					int length = 0;

					this.AddressID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.AddressID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AddressLine1 = readString(dis, ois);

				this.AddressLine2 = readString(dis, ois);

				this.StateProvince = readString(dis, ois);

				this.CountryRegion = readString(dis, ois);

				this.City = readString(dis, ois);

				this.PostalCode = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.AddressLine1, dos, oos);

				writeString(this.AddressLine2, dos, oos);

				writeString(this.StateProvince, dos, oos);

				writeString(this.CountryRegion, dos, oos);

				writeString(this.City, dos, oos);

				writeString(this.PostalCode, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AddressID=" + String.valueOf(AddressID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",City=" + City);
			sb.append(",PostalCode=" + PostalCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(addressBILLStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				addressBILLStruct addressBILL = new addressBILLStruct();

				/**
				 * [tAdvancedHash_addressBILL begin ] start
				 */

				ok_Hash.put("tAdvancedHash_addressBILL", false);
				start_Hash.put("tAdvancedHash_addressBILL", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_addressBILL";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "addressBILL");
				}

				int tos_count_tAdvancedHash_addressBILL = 0;

				// connection name:addressBILL
				// source node:tFileInputDelimited_8 - inputs:(after_tFileInputDelimited_5)
				// outputs:(addressBILL,addressBILL) | target node:tAdvancedHash_addressBILL -
				// inputs:(addressBILL) outputs:()
				// linked node: tMap_3 - inputs:(salesOrder,addressShip,customer,addressBILL)
				// outputs:(Sales)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_addressBILL = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<addressBILLStruct> tHash_Lookup_addressBILL = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<addressBILLStruct>getLookup(matchingModeEnum_addressBILL);

				globalMap.put("tHash_Lookup_addressBILL", tHash_Lookup_addressBILL);

				/**
				 * [tAdvancedHash_addressBILL begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				int limit_tFileInputDelimited_8 = -1;
				try {

					Object filename_tFileInputDelimited_8 = "D:/DataLake/Harmonized/HA_address_"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
						if (footer_value_tFileInputDelimited_8 > 0 || random_value_tFileInputDelimited_8 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
								"D:/DataLake/Harmonized/HA_address_" + TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_8, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_8 != null && fid_tFileInputDelimited_8.nextRecord()) {
						rowstate_tFileInputDelimited_8.reset();

						addressBILL = null;

						addressBILL = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						addressBILL = new addressBILLStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_8 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_8 = 0;

							temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
							if (temp.length() > 0) {

								try {

									addressBILL.AddressID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_8) {
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"AddressID", "addressBILL", temp, ex_tFileInputDelimited_8),
											ex_tFileInputDelimited_8));
								}

							} else {

								rowstate_tFileInputDelimited_8.setException(new RuntimeException(
										"Value is empty for column : 'AddressID' in 'addressBILL' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_8 = 1;

							addressBILL.AddressLine1 = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 2;

							addressBILL.AddressLine2 = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 3;

							addressBILL.StateProvince = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 4;

							addressBILL.CountryRegion = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 5;

							addressBILL.City = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 6;

							addressBILL.PostalCode = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							if (rowstate_tFileInputDelimited_8.getException() != null) {
								throw rowstate_tFileInputDelimited_8.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							addressBILL = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */

						/**
						 * [tFileInputDelimited_8 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						/**
						 * [tFileInputDelimited_8 process_data_begin ] stop
						 */
// Start of branch "addressBILL"
						if (addressBILL != null) {

							/**
							 * [tAdvancedHash_addressBILL main ] start
							 */

							currentComponent = "tAdvancedHash_addressBILL";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "addressBILL");
							}

							addressBILLStruct addressBILL_HashRow = new addressBILLStruct();

							addressBILL_HashRow.AddressID = addressBILL.AddressID;

							addressBILL_HashRow.AddressLine1 = addressBILL.AddressLine1;

							addressBILL_HashRow.AddressLine2 = addressBILL.AddressLine2;

							addressBILL_HashRow.StateProvince = addressBILL.StateProvince;

							addressBILL_HashRow.CountryRegion = addressBILL.CountryRegion;

							addressBILL_HashRow.City = addressBILL.City;

							addressBILL_HashRow.PostalCode = addressBILL.PostalCode;

							tHash_Lookup_addressBILL.put(addressBILL_HashRow);

							tos_count_tAdvancedHash_addressBILL++;

							/**
							 * [tAdvancedHash_addressBILL main ] stop
							 */

							/**
							 * [tAdvancedHash_addressBILL process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_addressBILL";

							/**
							 * [tAdvancedHash_addressBILL process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_addressBILL process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_addressBILL";

							/**
							 * [tAdvancedHash_addressBILL process_data_end ] stop
							 */

						} // End of branch "addressBILL"

						/**
						 * [tFileInputDelimited_8 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						/**
						 * [tFileInputDelimited_8 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

					}
				} finally {
					if (!((Object) ("D:/DataLake/Harmonized/HA_address_" + TalendDate.getDate("YYYY-MM-DD")
							+ ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_8 != null) {
							fid_tFileInputDelimited_8.close();
						}
					}
					if (fid_tFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_addressBILL end ] start
				 */

				currentComponent = "tAdvancedHash_addressBILL";

				tHash_Lookup_addressBILL.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "addressBILL");
				}

				ok_Hash.put("tAdvancedHash_addressBILL", true);
				end_Hash.put("tAdvancedHash_addressBILL", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_addressBILL end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_8 finally ] start
				 */

				currentComponent = "tFileInputDelimited_8";

				/**
				 * [tFileInputDelimited_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_addressBILL finally ] start
				 */

				currentComponent = "tAdvancedHash_addressBILL";

				/**
				 * [tAdvancedHash_addressBILL finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final JobExportDS JobExportDSClass = new JobExportDS();

		int exitCode = JobExportDSClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = JobExportDS.class.getClassLoader()
					.getResourceAsStream("ingestaodados/jobexportds_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = JobExportDS.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_5) {
			globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_5.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : JobExportDS");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 297123 characters generated by Talend Open Studio for Big Data on the 1 de
 * Maio de 2021 11h34min57s BRT
 ************************************************************************************************/