// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ingestaodados.jobexportharmonized_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: JobExportHarmonized Purpose: Export dados para a hierarquia Harmonized<br>
 * Description: Export dados para a hierarquia Harmonized <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class JobExportHarmonized implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "JobExportHarmonized";
	private final String projectName = "INGESTAODADOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				JobExportHarmonized.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(JobExportHarmonized.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		ingestaodados.jobexportds_0_1.JobExportDS childJob_tRunJob_1 = new ingestaodados.jobexportds_0_1.JobExportDS();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_1.getErrorCode();
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.AddressID = dis.readInt();
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.City = readString(dis);
					
					this.PostalCode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",City="+City);
		sb.append(",PostalCode="+PostalCode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.AddressID = dis.readInt();
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.City = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",City="+City);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File("D:/DataLake/Harmonized/HA_address_"+TalendDate.getDate("YYYY-MM-DD")+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                        if(fileToDelete_tFileOutputDelimited_4.exists()) {
                            fileToDelete_tFileOutputDelimited_4.delete();
                        }
                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_4.length()==0){
                                        outtFileOutputDelimited_4.write("AddressID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("AddressLine1");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("AddressLine2");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("StateProvince");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("CountryRegion");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("City");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("PostalCode");
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = "D:/DataLake/RawData/address_"+TalendDate.getDate("YYYY-MM-DD")+".csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("D:/DataLake/RawData/address_"+TalendDate.getDate("YYYY-MM-DD")+".csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row4 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row4 = new row4Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row4.AddressID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"AddressID", "row4", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'AddressID' in 'row4' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row4.AddressLine1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							row4.AddressLine2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							row4.StateProvince = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							row4.CountryRegion = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							row4.City = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row4.PostalCode = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							row4.rowguid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
							row4.ModifiedDate = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row4 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.AddressID = row4.AddressID ;
out1_tmp.AddressLine1 = row4.AddressLine1 ;
out1_tmp.AddressLine2 = row4.AddressLine2 ;
out1_tmp.StateProvince = row4.StateProvince ;
out1_tmp.CountryRegion = row4.CountryRegion ;
out1_tmp.City = row4.City ;
out1_tmp.PostalCode = row4.PostalCode ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                        sb_tFileOutputDelimited_4.append(
                            out1.AddressID
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(out1.AddressLine1 != null) {
                        sb_tFileOutputDelimited_4.append(
                            out1.AddressLine1
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(out1.AddressLine2 != null) {
                        sb_tFileOutputDelimited_4.append(
                            out1.AddressLine2
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(out1.StateProvince != null) {
                        sb_tFileOutputDelimited_4.append(
                            out1.StateProvince
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(out1.CountryRegion != null) {
                        sb_tFileOutputDelimited_4.append(
                            out1.CountryRegion
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(out1.City != null) {
                        sb_tFileOutputDelimited_4.append(
                            out1.City
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(out1.PostalCode != null) {
                        sb_tFileOutputDelimited_4.append(
                            out1.PostalCode
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("D:/DataLake/RawData/address_"+TalendDate.getDate("YYYY-MM-DD")+".csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressType;

				public String getAddressType () {
					return this.AddressType;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
			        this.AddressID = dis.readInt();
					
					this.AddressType = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressType,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",AddressID="+String.valueOf(AddressID));
		sb.append(",AddressType="+AddressType);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressType;

				public String getAddressType () {
					return this.AddressType;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
			        this.AddressID = dis.readInt();
					
					this.AddressType = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressType,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",AddressID="+String.valueOf(AddressID));
		sb.append(",AddressType="+AddressType);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tFileOutputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_5", false);
		start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tFileOutputDelimited_5 = 0;
		

String fileName_tFileOutputDelimited_5 = "";
    fileName_tFileOutputDelimited_5 = (new java.io.File("D:/DataLake/Harmonized/HA_customerAddress_"+TalendDate.getDate("YYYY-MM-DD")+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_5 = null;
    String extension_tFileOutputDelimited_5 = null;
    String directory_tFileOutputDelimited_5 = null;
    if((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        }
        directory_tFileOutputDelimited_5 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_5 = true;
    java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
    globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
            int nb_line_tFileOutputDelimited_5 = 0;
            int splitedFileNo_tFileOutputDelimited_5 = 0;
            int currentRow_tFileOutputDelimited_5 = 0;

            final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
                        if(!dir_tFileOutputDelimited_5.exists()) {
                            dir_tFileOutputDelimited_5.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_5 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
                        if(fileToDelete_tFileOutputDelimited_5.exists()) {
                            fileToDelete_tFileOutputDelimited_5.delete();
                        }
                        outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_5.length()==0){
                                        outtFileOutputDelimited_5.write("CustomerID");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("AddressID");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("AddressType");
                                        outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

 



/**
 * [tFileOutputDelimited_5 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = "D:/DataLake/RawData/customerAddress_"+TalendDate.getDate("YYYY-MM-DD")+".csv";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited("D:/DataLake/RawData/customerAddress_"+TalendDate.getDate("YYYY-MM-DD")+".csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row5 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row5 = new row5Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.CustomerID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_3.setException(new RuntimeException("Value is empty for column : 'CustomerID' in 'row5' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.AddressID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"AddressID", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_3.setException(new RuntimeException("Value is empty for column : 'AddressID' in 'row5' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
							row5.AddressType = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
							row5.rowguid = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
							row5.ModifiedDate = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row5 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.CustomerID = row5.CustomerID ;
out2_tmp.AddressID = row5.AddressID ;
out2_tmp.AddressType = row5.AddressType ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFileOutputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					


                    StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
                        sb_tFileOutputDelimited_5.append(
                            out2.CustomerID
                        );
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                        sb_tFileOutputDelimited_5.append(
                            out2.AddressID
                        );
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(out2.AddressType != null) {
                        sb_tFileOutputDelimited_5.append(
                            out2.AddressType
                        );
                            }
                    sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);


                    nb_line_tFileOutputDelimited_5++;
                    resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

                        outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());




 


	tos_count_tFileOutputDelimited_5++;

/**
 * [tFileOutputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)("D:/DataLake/RawData/customerAddress_"+TalendDate.getDate("YYYY-MM-DD")+".csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	



		
			
					if(outtFileOutputDelimited_5!=null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}
				
				globalMap.put("tFileOutputDelimited_5_NB_LINE",nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_5", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_5", true);
end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	


		if(resourceMap.get("finish_tFileOutputDelimited_5") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_5");
						if(outtFileOutputDelimited_5!=null) {
							outtFileOutputDelimited_5.flush();
							outtFileOutputDelimited_5.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public boolean NameStyle;

				public boolean getNameStyle () {
					return this.NameStyle;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String Phone;

				public String getPhone () {
					return this.Phone;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
			        this.NameStyle = dis.readBoolean();
					
					this.Title = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// boolean
				
		            	dos.writeBoolean(this.NameStyle);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",NameStyle="+String.valueOf(NameStyle));
		sb.append(",Title="+Title);
		sb.append(",FirstName="+FirstName);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",LastName="+LastName);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",Phone="+Phone);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public boolean NameStyle;

				public boolean getNameStyle () {
					return this.NameStyle;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String Phone;

				public String getPhone () {
					return this.Phone;
				}
				
			    public String PasswordHash;

				public String getPasswordHash () {
					return this.PasswordHash;
				}
				
			    public String PasswordSalt;

				public String getPasswordSalt () {
					return this.PasswordSalt;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
			        this.NameStyle = dis.readBoolean();
					
					this.Title = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.PasswordHash = readString(dis);
					
					this.PasswordSalt = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// boolean
				
		            	dos.writeBoolean(this.NameStyle);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.PasswordHash,dos);
					
					// String
				
						writeString(this.PasswordSalt,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",NameStyle="+String.valueOf(NameStyle));
		sb.append(",Title="+Title);
		sb.append(",FirstName="+FirstName);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",LastName="+LastName);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",Phone="+Phone);
		sb.append(",PasswordHash="+PasswordHash);
		sb.append(",PasswordSalt="+PasswordSalt);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
out3Struct out3 = new out3Struct();





	
	/**
	 * [tFileOutputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_6", false);
		start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tFileOutputDelimited_6 = 0;
		

String fileName_tFileOutputDelimited_6 = "";
    fileName_tFileOutputDelimited_6 = (new java.io.File("D:/DataLake/Harmonized/HA_customer_"+TalendDate.getDate("YYYY-MM-DD")+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_6 = null;
    String extension_tFileOutputDelimited_6 = null;
    String directory_tFileOutputDelimited_6 = null;
    if((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        }
        directory_tFileOutputDelimited_6 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_6 = true;
    java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
    globalMap.put("tFileOutputDelimited_6_FILE_NAME",fileName_tFileOutputDelimited_6);
            int nb_line_tFileOutputDelimited_6 = 0;
            int splitedFileNo_tFileOutputDelimited_6 = 0;
            int currentRow_tFileOutputDelimited_6 = 0;

            final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
                        if(!dir_tFileOutputDelimited_6.exists()) {
                            dir_tFileOutputDelimited_6.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_6 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
                        if(fileToDelete_tFileOutputDelimited_6.exists()) {
                            fileToDelete_tFileOutputDelimited_6.delete();
                        }
                        outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_6.length()==0){
                                        outtFileOutputDelimited_6.write("CustomerID");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("NameStyle");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("Title");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("FirstName");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("MiddleName");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("LastName");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("Suffix");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("CompanyName");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("SalesPerson");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("EmailAddress");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("Phone");
                                        outtFileOutputDelimited_6.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

 



/**
 * [tFileOutputDelimited_6 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = "D:/DataLake/RawData/customer_"+TalendDate.getDate("YYYY-MM-DD")+".csv";
						if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
			if(footer_value_tFileInputDelimited_4 >0 || random_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited("D:/DataLake/RawData/customer_"+TalendDate.getDate("YYYY-MM-DD")+".csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_4
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						row6 = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									row6 = new row6Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row6.CustomerID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "row6", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_4.setException(new RuntimeException("Value is empty for column : 'CustomerID' in 'row6' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row6.NameStyle = ParserUtils.parseTo_boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"NameStyle", "row6", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_4.setException(new RuntimeException("Value is empty for column : 'NameStyle' in 'row6' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 2;
					
							row6.Title = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 3;
					
							row6.FirstName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 4;
					
							row6.MiddleName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 5;
					
							row6.LastName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 6;
					
							row6.Suffix = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 7;
					
							row6.CompanyName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 8;
					
							row6.SalesPerson = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 9;
					
							row6.EmailAddress = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 10;
					
							row6.Phone = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 11;
					
							row6.PasswordHash = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 12;
					
							row6.PasswordSalt = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 13;
					
							row6.rowguid = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 14;
					
							row6.ModifiedDate = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row6 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.CustomerID = row6.CustomerID ;
out3_tmp.NameStyle = row6.NameStyle ;
out3_tmp.Title = row6.Title ;
out3_tmp.FirstName = row6.FirstName ;
out3_tmp.MiddleName = row6.MiddleName ;
out3_tmp.LastName = row6.LastName ;
out3_tmp.Suffix = row6.Suffix ;
out3_tmp.CompanyName = row6.CompanyName ;
out3_tmp.SalesPerson = row6.SalesPerson ;
out3_tmp.EmailAddress = row6.EmailAddress ;
out3_tmp.Phone = row6.Phone ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFileOutputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out3");
					}
					


                    StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
                        sb_tFileOutputDelimited_6.append(
                            out3.CustomerID
                        );
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                        sb_tFileOutputDelimited_6.append(
                            out3.NameStyle
                        );
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(out3.Title != null) {
                        sb_tFileOutputDelimited_6.append(
                            out3.Title
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(out3.FirstName != null) {
                        sb_tFileOutputDelimited_6.append(
                            out3.FirstName
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(out3.MiddleName != null) {
                        sb_tFileOutputDelimited_6.append(
                            out3.MiddleName
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(out3.LastName != null) {
                        sb_tFileOutputDelimited_6.append(
                            out3.LastName
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(out3.Suffix != null) {
                        sb_tFileOutputDelimited_6.append(
                            out3.Suffix
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(out3.CompanyName != null) {
                        sb_tFileOutputDelimited_6.append(
                            out3.CompanyName
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(out3.SalesPerson != null) {
                        sb_tFileOutputDelimited_6.append(
                            out3.SalesPerson
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(out3.EmailAddress != null) {
                        sb_tFileOutputDelimited_6.append(
                            out3.EmailAddress
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(out3.Phone != null) {
                        sb_tFileOutputDelimited_6.append(
                            out3.Phone
                        );
                            }
                    sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);


                    nb_line_tFileOutputDelimited_6++;
                    resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

                        outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());




 


	tos_count_tFileOutputDelimited_6++;

/**
 * [tFileOutputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	

 



/**
 * [tFileOutputDelimited_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	

 



/**
 * [tFileOutputDelimited_6 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	



            }
            }finally{
                if(!((Object)("D:/DataLake/RawData/customer_"+TalendDate.getDate("YYYY-MM-DD")+".csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_4!=null){
                		fid_tFileInputDelimited_4.close();
                	}
                }
                if(fid_tFileInputDelimited_4!=null){
                	globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	



		
			
					if(outtFileOutputDelimited_6!=null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}
				
				globalMap.put("tFileOutputDelimited_6_NB_LINE",nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",fileName_tFileOutputDelimited_6);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_6", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_6", true);
end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	


		if(resourceMap.get("finish_tFileOutputDelimited_6") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_6");
						if(outtFileOutputDelimited_6!=null) {
							outtFileOutputDelimited_6.flush();
							outtFileOutputDelimited_6.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	


public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Object StandardCost;

				public Object getStandardCost () {
					return this.StandardCost;
				}
				
			    public Object ListPrice;

				public Object getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String SellStartDate;

				public String getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public String SellEndDate;

				public String getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public String DiscontinuedDate;

				public String getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readString(dis);
					
					this.SellEndDate = readString(dis);
					
					this.DiscontinuedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.SellStartDate,dos);
					
					// String
				
						writeString(this.SellEndDate,dos);
					
					// String
				
						writeString(this.DiscontinuedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+SellStartDate);
		sb.append(",SellEndDate="+SellEndDate);
		sb.append(",DiscontinuedDate="+DiscontinuedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Object StandardCost;

				public Object getStandardCost () {
					return this.StandardCost;
				}
				
			    public Object ListPrice;

				public Object getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String SellStartDate;

				public String getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public String SellEndDate;

				public String getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public String DiscontinuedDate;

				public String getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public Object ThumbNailPhoto;

				public Object getThumbNailPhoto () {
					return this.ThumbNailPhoto;
				}
				
			    public String ThumbnailPhotoFileName;

				public String getThumbnailPhotoFileName () {
					return this.ThumbnailPhotoFileName;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readString(dis);
					
					this.SellEndDate = readString(dis);
					
					this.DiscontinuedDate = readString(dis);
					
						this.ThumbNailPhoto = (Object) dis.readObject();
					
					this.ThumbnailPhotoFileName = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.SellStartDate,dos);
					
					// String
				
						writeString(this.SellEndDate,dos);
					
					// String
				
						writeString(this.DiscontinuedDate,dos);
					
					// Object
				
       			    	dos.writeObject(this.ThumbNailPhoto);
					
					// String
				
						writeString(this.ThumbnailPhotoFileName,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+SellStartDate);
		sb.append(",SellEndDate="+SellEndDate);
		sb.append(",DiscontinuedDate="+DiscontinuedDate);
		sb.append(",ThumbNailPhoto="+String.valueOf(ThumbNailPhoto));
		sb.append(",ThumbnailPhotoFileName="+ThumbnailPhotoFileName);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
out4Struct out4 = new out4Struct();





	
	/**
	 * [tFileOutputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_7", false);
		start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tFileOutputDelimited_7 = 0;
		

String fileName_tFileOutputDelimited_7 = "";
    fileName_tFileOutputDelimited_7 = (new java.io.File("D:/DataLake/Harmonized/HA_product_"+TalendDate.getDate("YYYY-MM-DD")+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_7 = null;
    String extension_tFileOutputDelimited_7 = null;
    String directory_tFileOutputDelimited_7 = null;
    if((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        }
        directory_tFileOutputDelimited_7 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_7 = true;
    java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
    globalMap.put("tFileOutputDelimited_7_FILE_NAME",fileName_tFileOutputDelimited_7);
            int nb_line_tFileOutputDelimited_7 = 0;
            int splitedFileNo_tFileOutputDelimited_7 = 0;
            int currentRow_tFileOutputDelimited_7 = 0;

            final String OUT_DELIM_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
                        if(!dir_tFileOutputDelimited_7.exists()) {
                            dir_tFileOutputDelimited_7.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_7 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
                        if(fileToDelete_tFileOutputDelimited_7.exists()) {
                            fileToDelete_tFileOutputDelimited_7.delete();
                        }
                        outtFileOutputDelimited_7 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_7.length()==0){
                                        outtFileOutputDelimited_7.write("ProductID");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("Name");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("ProductNumber");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("Color");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("StandardCost");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("ListPrice");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("Size");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("Weight");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("ProductCategoryID");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("ProductModelID");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("SellStartDate");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("SellEndDate");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("DiscontinuedDate");
                                        outtFileOutputDelimited_7.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_7", outtFileOutputDelimited_7);
resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

 



/**
 * [tFileOutputDelimited_7 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try{
					
						Object filename_tFileInputDelimited_5 = "D:/DataLake/RawData/product_"+TalendDate.getDate("YYYY-MM-DD")+".csv";
						if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
			if(footer_value_tFileInputDelimited_5 >0 || random_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited("D:/DataLake/RawData/product_"+TalendDate.getDate("YYYY-MM-DD")+".csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_5
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_5!=null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();
						
			    						row7 = null;			
												
									boolean whetherReject_tFileInputDelimited_5 = false;
									row7 = new row7Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_5 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_5 = 0;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row7.ProductID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "row7", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_5.setException(new RuntimeException("Value is empty for column : 'ProductID' in 'row7' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 1;
					
							row7.Name = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 2;
					
							row7.ProductNumber = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 3;
					
							row7.Color = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 4;
					
							row7.StandardCost = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 5;
					
							row7.ListPrice = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 6;
					
							row7.Size = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 7;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row7.Weight = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Weight", "row7", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row7.Weight = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 8;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row7.ProductCategoryID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductCategoryID", "row7", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row7.ProductCategoryID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 9;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row7.ProductModelID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductModelID", "row7", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row7.ProductModelID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 10;
					
							row7.SellStartDate = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 11;
					
							row7.SellEndDate = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 12;
					
							row7.DiscontinuedDate = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 13;
					
							row7.ThumbNailPhoto = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 14;
					
							row7.ThumbnailPhotoFileName = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 15;
					
							row7.rowguid = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 16;
					
							row7.ModifiedDate = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
				
										
										if(rowstate_tFileInputDelimited_5.getException()!=null) {
											throw rowstate_tFileInputDelimited_5.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_5 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row7 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.ProductID = row7.ProductID ;
out4_tmp.Name = row7.Name ;
out4_tmp.ProductNumber = row7.ProductNumber ;
out4_tmp.Color = row7.Color ;
out4_tmp.StandardCost = row7.StandardCost ;
out4_tmp.ListPrice = row7.ListPrice ;
out4_tmp.Size = row7.Size ;
out4_tmp.Weight = row7.Weight ;
out4_tmp.ProductCategoryID = row7.ProductCategoryID ;
out4_tmp.ProductModelID = row7.ProductModelID ;
out4_tmp.SellStartDate = row7.SellStartDate ;
out4_tmp.SellEndDate = row7.SellEndDate ;
out4_tmp.DiscontinuedDate = row7.DiscontinuedDate ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tFileOutputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out4");
					}
					


                    StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
                        sb_tFileOutputDelimited_7.append(
                            out4.ProductID
                        );
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.Name != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.Name
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.ProductNumber != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.ProductNumber
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.Color != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.Color
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.StandardCost != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.StandardCost
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.ListPrice != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.ListPrice
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.Size != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.Size
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.Weight != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.Weight.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.ProductCategoryID != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.ProductCategoryID
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.ProductModelID != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.ProductModelID
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.SellStartDate != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.SellStartDate
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.SellEndDate != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.SellEndDate
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(out4.DiscontinuedDate != null) {
                        sb_tFileOutputDelimited_7.append(
                            out4.DiscontinuedDate
                        );
                            }
                    sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);


                    nb_line_tFileOutputDelimited_7++;
                    resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

                        outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());




 


	tos_count_tFileOutputDelimited_7++;

/**
 * [tFileOutputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	

 



/**
 * [tFileOutputDelimited_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	

 



/**
 * [tFileOutputDelimited_7 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	



            }
            }finally{
                if(!((Object)("D:/DataLake/RawData/product_"+TalendDate.getDate("YYYY-MM-DD")+".csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_5!=null){
                		fid_tFileInputDelimited_5.close();
                	}
                }
                if(fid_tFileInputDelimited_5!=null){
                	globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	



		
			
					if(outtFileOutputDelimited_7!=null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}
				
				globalMap.put("tFileOutputDelimited_7_NB_LINE",nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",fileName_tFileOutputDelimited_7);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_7", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_7", true);
end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	


		if(resourceMap.get("finish_tFileOutputDelimited_7") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_7");
						if(outtFileOutputDelimited_7!=null) {
							outtFileOutputDelimited_7.flush();
							outtFileOutputDelimited_7.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	


public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int ProductCategoryID;

				public int getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public Integer ParentProductCategoryID;

				public Integer getParentProductCategoryID () {
					return this.ParentProductCategoryID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.ProductCategoryID = dis.readInt();
					
					this.Name = readString(dis);
					
						this.ParentProductCategoryID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductCategoryID);
					
					// String
				
						writeString(this.Name,dos);
					
					// Integer
				
						writeInteger(this.ParentProductCategoryID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",Name="+Name);
		sb.append(",ParentProductCategoryID="+String.valueOf(ParentProductCategoryID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int ProductCategoryID;

				public int getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public Integer ParentProductCategoryID;

				public Integer getParentProductCategoryID () {
					return this.ParentProductCategoryID;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.ProductCategoryID = dis.readInt();
					
					this.Name = readString(dis);
					
						this.ParentProductCategoryID = readInteger(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductCategoryID);
					
					// String
				
						writeString(this.Name,dos);
					
					// Integer
				
						writeInteger(this.ParentProductCategoryID,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",Name="+Name);
		sb.append(",ParentProductCategoryID="+String.valueOf(ParentProductCategoryID));
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
out5Struct out5 = new out5Struct();





	
	/**
	 * [tFileOutputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_8", false);
		start_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tFileOutputDelimited_8 = 0;
		

String fileName_tFileOutputDelimited_8 = "";
    fileName_tFileOutputDelimited_8 = (new java.io.File("D:/DataLake/Harmonized/HA_productCategory_"+TalendDate.getDate("YYYY-MM-DD")+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_8 = null;
    String extension_tFileOutputDelimited_8 = null;
    String directory_tFileOutputDelimited_8 = null;
    if((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
            extension_tFileOutputDelimited_8 = "";
        } else {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("."));
            extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("."));
            extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
            extension_tFileOutputDelimited_8 = "";
        }
        directory_tFileOutputDelimited_8 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_8 = true;
    java.io.File filetFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
    globalMap.put("tFileOutputDelimited_8_FILE_NAME",fileName_tFileOutputDelimited_8);
            int nb_line_tFileOutputDelimited_8 = 0;
            int splitedFileNo_tFileOutputDelimited_8 = 0;
            int currentRow_tFileOutputDelimited_8 = 0;

            final String OUT_DELIM_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_8 != null && directory_tFileOutputDelimited_8.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_8 = new java.io.File(directory_tFileOutputDelimited_8);
                        if(!dir_tFileOutputDelimited_8.exists()) {
                            dir_tFileOutputDelimited_8.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_8 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
                        if(fileToDelete_tFileOutputDelimited_8.exists()) {
                            fileToDelete_tFileOutputDelimited_8.delete();
                        }
                        outtFileOutputDelimited_8 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_8, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_8.length()==0){
                                        outtFileOutputDelimited_8.write("ProductCategoryID");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("Name");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("ParentProductCategoryID");
                                        outtFileOutputDelimited_8.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_8", outtFileOutputDelimited_8);
resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

 



/**
 * [tFileOutputDelimited_8 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_6", false);
		start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_6";

	
		int tos_count_tFileInputDelimited_6 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try{
					
						Object filename_tFileInputDelimited_6 = "D:/DataLake/RawData/productCategory_"+TalendDate.getDate("YYYY-MM-DD")+".csv";
						if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
			if(footer_value_tFileInputDelimited_6 >0 || random_value_tFileInputDelimited_6 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited("D:/DataLake/RawData/productCategory_"+TalendDate.getDate("YYYY-MM-DD")+".csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_6
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_6!=null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();
						
			    						row8 = null;			
												
									boolean whetherReject_tFileInputDelimited_6 = false;
									row8 = new row8Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_6 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_6 = 0;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								row8.ProductCategoryID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductCategoryID", "row8", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_6.setException(new RuntimeException("Value is empty for column : 'ProductCategoryID' in 'row8' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 1;
					
							row8.Name = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 2;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								row8.ParentProductCategoryID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ParentProductCategoryID", "row8", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									row8.ParentProductCategoryID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 3;
					
							row8.rowguid = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 4;
					
							row8.ModifiedDate = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
				
										
										if(rowstate_tFileInputDelimited_6.getException()!=null) {
											throw rowstate_tFileInputDelimited_6.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_6 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row8 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_6 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 


	tos_count_tFileInputDelimited_6++;

/**
 * [tFileInputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.ProductCategoryID = row8.ProductCategoryID ;
out5_tmp.Name = row8.Name ;
out5_tmp.ParentProductCategoryID = row8.ParentProductCategoryID ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tFileOutputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out5");
					}
					


                    StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();
                        sb_tFileOutputDelimited_8.append(
                            out5.ProductCategoryID
                        );
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(out5.Name != null) {
                        sb_tFileOutputDelimited_8.append(
                            out5.Name
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(out5.ParentProductCategoryID != null) {
                        sb_tFileOutputDelimited_8.append(
                            out5.ParentProductCategoryID
                        );
                            }
                    sb_tFileOutputDelimited_8.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);


                    nb_line_tFileOutputDelimited_8++;
                    resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

                        outtFileOutputDelimited_8.write(sb_tFileOutputDelimited_8.toString());




 


	tos_count_tFileOutputDelimited_8++;

/**
 * [tFileOutputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	

 



/**
 * [tFileOutputDelimited_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	

 



/**
 * [tFileOutputDelimited_8 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFileInputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	



            }
            }finally{
                if(!((Object)("D:/DataLake/RawData/productCategory_"+TalendDate.getDate("YYYY-MM-DD")+".csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_6!=null){
                		fid_tFileInputDelimited_6.close();
                	}
                }
                if(fid_tFileInputDelimited_6!=null){
                	globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_6", true);
end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());




/**
 * [tFileInputDelimited_6 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	



		
			
					if(outtFileOutputDelimited_8!=null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}
				
				globalMap.put("tFileOutputDelimited_8_NB_LINE",nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",fileName_tFileOutputDelimited_8);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_8", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_8", true);
end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	


		if(resourceMap.get("finish_tFileOutputDelimited_8") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_8");
						if(outtFileOutputDelimited_8!=null) {
							outtFileOutputDelimited_8.flush();
							outtFileOutputDelimited_8.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}
	


public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductDescriptionID;

				public int getProductDescriptionID () {
					return this.ProductDescriptionID;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductDescriptionID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out6Struct other = (out6Struct) obj;
		
						if (this.ProductDescriptionID != other.ProductDescriptionID)
							return false;
					

		return true;
    }

	public void copyDataTo(out6Struct other) {

		other.ProductDescriptionID = this.ProductDescriptionID;
	            other.Description = this.Description;
	            
	}

	public void copyKeysDataTo(out6Struct other) {

		other.ProductDescriptionID = this.ProductDescriptionID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.ProductDescriptionID = dis.readInt();
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductDescriptionID="+String.valueOf(ProductDescriptionID));
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductDescriptionID, other.ProductDescriptionID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int ProductDescriptionID;

				public int getProductDescriptionID () {
					return this.ProductDescriptionID;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.ProductDescriptionID = dis.readInt();
					
					this.Description = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
					// String
				
						writeString(this.Description,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductDescriptionID="+String.valueOf(ProductDescriptionID));
		sb.append(",Description="+Description);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
out6Struct out6 = new out6Struct();





	
	/**
	 * [tFileOutputDelimited_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_9", false);
		start_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tFileOutputDelimited_9 = 0;
		

String fileName_tFileOutputDelimited_9 = "";
    fileName_tFileOutputDelimited_9 = (new java.io.File("D:/DataLake/Harmonized/HA_productDescription_"+TalendDate.getDate("YYYY-MM-DD")+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_9 = null;
    String extension_tFileOutputDelimited_9 = null;
    String directory_tFileOutputDelimited_9 = null;
    if((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
            extension_tFileOutputDelimited_9 = "";
        } else {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("."));
            extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("."));
            extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
            extension_tFileOutputDelimited_9 = "";
        }
        directory_tFileOutputDelimited_9 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_9 = true;
    java.io.File filetFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
    globalMap.put("tFileOutputDelimited_9_FILE_NAME",fileName_tFileOutputDelimited_9);
            int nb_line_tFileOutputDelimited_9 = 0;
            int splitedFileNo_tFileOutputDelimited_9 = 0;
            int currentRow_tFileOutputDelimited_9 = 0;

            final String OUT_DELIM_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_9 != null && directory_tFileOutputDelimited_9.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_9 = new java.io.File(directory_tFileOutputDelimited_9);
                        if(!dir_tFileOutputDelimited_9.exists()) {
                            dir_tFileOutputDelimited_9.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_9 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
                        if(fileToDelete_tFileOutputDelimited_9.exists()) {
                            fileToDelete_tFileOutputDelimited_9.delete();
                        }
                        outtFileOutputDelimited_9 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_9, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_9.length()==0){
                                        outtFileOutputDelimited_9.write("ProductDescriptionID");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("Description");
                                        outtFileOutputDelimited_9.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_9", outtFileOutputDelimited_9);
resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

 



/**
 * [tFileOutputDelimited_9 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_7", false);
		start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_7";

	
		int tos_count_tFileInputDelimited_7 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try{
					
						Object filename_tFileInputDelimited_7 = "D:/DataLake/RawData/productDescription_"+TalendDate.getDate("YYYY-MM-DD")+".csv";
						if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
			if(footer_value_tFileInputDelimited_7 >0 || random_value_tFileInputDelimited_7 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited("D:/DataLake/RawData/productDescription_"+TalendDate.getDate("YYYY-MM-DD")+".csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_7
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_7!=null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();
						
			    						row9 = null;			
												
									boolean whetherReject_tFileInputDelimited_7 = false;
									row9 = new row9Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_7 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_7 = 0;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    								row9.ProductDescriptionID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductDescriptionID", "row9", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_7.setException(new RuntimeException("Value is empty for column : 'ProductDescriptionID' in 'row9' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 1;
					
							row9.Description = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 2;
					
							row9.rowguid = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 3;
					
							row9.ModifiedDate = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
				
										
										if(rowstate_tFileInputDelimited_7.getException()!=null) {
											throw rowstate_tFileInputDelimited_7.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_7 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row9 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_7 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 


	tos_count_tFileInputDelimited_7++;

/**
 * [tFileInputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out6 = null;


// # Output table : 'out6'
out6_tmp.ProductDescriptionID = row9.ProductDescriptionID ;
out6_tmp.Description = row9.Description ;
out6 = out6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tFileOutputDelimited_9 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out6");
					}
					


                    StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();
                        sb_tFileOutputDelimited_9.append(
                            out6.ProductDescriptionID
                        );
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                            if(out6.Description != null) {
                        sb_tFileOutputDelimited_9.append(
                            out6.Description
                        );
                            }
                    sb_tFileOutputDelimited_9.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);


                    nb_line_tFileOutputDelimited_9++;
                    resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

                        outtFileOutputDelimited_9.write(sb_tFileOutputDelimited_9.toString());




 


	tos_count_tFileOutputDelimited_9++;

/**
 * [tFileOutputDelimited_9 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	

 



/**
 * [tFileOutputDelimited_9 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	

 



/**
 * [tFileOutputDelimited_9 process_data_end ] stop
 */

} // End of branch "out6"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tFileInputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	



            }
            }finally{
                if(!((Object)("D:/DataLake/RawData/productDescription_"+TalendDate.getDate("YYYY-MM-DD")+".csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_7!=null){
                		fid_tFileInputDelimited_7.close();
                	}
                }
                if(fid_tFileInputDelimited_7!=null){
                	globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_7", true);
end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());




/**
 * [tFileInputDelimited_7 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_9 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	



		
			
					if(outtFileOutputDelimited_9!=null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}
				
				globalMap.put("tFileOutputDelimited_9_NB_LINE",nb_line_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME",fileName_tFileOutputDelimited_9);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_9", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_9", true);
end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_9 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_9 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	


		if(resourceMap.get("finish_tFileOutputDelimited_9") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_9 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_9");
						if(outtFileOutputDelimited_9!=null) {
							outtFileOutputDelimited_9.flush();
							outtFileOutputDelimited_9.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}
	


public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String CatalogDescription;

				public String getCatalogDescription () {
					return this.CatalogDescription;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.CatalogDescription = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CatalogDescription,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",Name="+Name);
		sb.append(",CatalogDescription="+CatalogDescription);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String CatalogDescription;

				public String getCatalogDescription () {
					return this.CatalogDescription;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.CatalogDescription = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CatalogDescription,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",Name="+Name);
		sb.append(",CatalogDescription="+CatalogDescription);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
out7Struct out7 = new out7Struct();





	
	/**
	 * [tFileOutputDelimited_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_10", false);
		start_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out7");
					}
				
		int tos_count_tFileOutputDelimited_10 = 0;
		

String fileName_tFileOutputDelimited_10 = "";
    fileName_tFileOutputDelimited_10 = (new java.io.File("D:/DataLake/Harmonized/HA_productModel_"+TalendDate.getDate("YYYY-MM-DD")+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_10 = null;
    String extension_tFileOutputDelimited_10 = null;
    String directory_tFileOutputDelimited_10 = null;
    if((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
            extension_tFileOutputDelimited_10 = "";
        } else {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0, fileName_tFileOutputDelimited_10.lastIndexOf("."));
            extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0, fileName_tFileOutputDelimited_10.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0, fileName_tFileOutputDelimited_10.lastIndexOf("."));
            extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
            extension_tFileOutputDelimited_10 = "";
        }
        directory_tFileOutputDelimited_10 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_10 = true;
    java.io.File filetFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
    globalMap.put("tFileOutputDelimited_10_FILE_NAME",fileName_tFileOutputDelimited_10);
            int nb_line_tFileOutputDelimited_10 = 0;
            int splitedFileNo_tFileOutputDelimited_10 = 0;
            int currentRow_tFileOutputDelimited_10 = 0;

            final String OUT_DELIM_tFileOutputDelimited_10 = /** Start field tFileOutputDelimited_10:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_10:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_10 = /** Start field tFileOutputDelimited_10:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_10:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_10 != null && directory_tFileOutputDelimited_10.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_10 = new java.io.File(directory_tFileOutputDelimited_10);
                        if(!dir_tFileOutputDelimited_10.exists()) {
                            dir_tFileOutputDelimited_10.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_10 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
                        if(fileToDelete_tFileOutputDelimited_10.exists()) {
                            fileToDelete_tFileOutputDelimited_10.delete();
                        }
                        outtFileOutputDelimited_10 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_10, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_10.length()==0){
                                        outtFileOutputDelimited_10.write("ProductModelID");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("Name");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("CatalogDescription");
                                        outtFileOutputDelimited_10.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_10", outtFileOutputDelimited_10);
resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);

 



/**
 * [tFileOutputDelimited_10 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
out7Struct out7_tmp = new out7Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_8", false);
		start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_8";

	
		int tos_count_tFileInputDelimited_8 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				int limit_tFileInputDelimited_8 = -1;
				try{
					
						Object filename_tFileInputDelimited_8 = "D:/DataLake/RawData/productModel_"+TalendDate.getDate("YYYY-MM-DD")+".csv";
						if(filename_tFileInputDelimited_8 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
			if(footer_value_tFileInputDelimited_8 >0 || random_value_tFileInputDelimited_8 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited("D:/DataLake/RawData/productModel_"+TalendDate.getDate("YYYY-MM-DD")+".csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_8
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_8!=null && fid_tFileInputDelimited_8.nextRecord()) {
						rowstate_tFileInputDelimited_8.reset();
						
			    						row10 = null;			
												
									boolean whetherReject_tFileInputDelimited_8 = false;
									row10 = new row10Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_8 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_8 = 0;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ProductModelID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductModelID", "row10", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_8.setException(new RuntimeException("Value is empty for column : 'ProductModelID' in 'row10' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 1;
					
							row10.Name = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 2;
					
							row10.CatalogDescription = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 3;
					
							row10.rowguid = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 4;
					
							row10.ModifiedDate = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
				
										
										if(rowstate_tFileInputDelimited_8.getException()!=null) {
											throw rowstate_tFileInputDelimited_8.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_8 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row10 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_8 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 


	tos_count_tFileInputDelimited_8++;

/**
 * [tFileInputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

out7 = null;


// # Output table : 'out7'
out7_tmp.ProductModelID = row10.ProductModelID ;
out7_tmp.Name = row10.Name ;
out7_tmp.CatalogDescription = row10.CatalogDescription ;
out7 = out7_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tFileOutputDelimited_10 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out7");
					}
					


                    StringBuilder sb_tFileOutputDelimited_10 = new StringBuilder();
                        sb_tFileOutputDelimited_10.append(
                            out7.ProductModelID
                        );
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(out7.Name != null) {
                        sb_tFileOutputDelimited_10.append(
                            out7.Name
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(out7.CatalogDescription != null) {
                        sb_tFileOutputDelimited_10.append(
                            out7.CatalogDescription
                        );
                            }
                    sb_tFileOutputDelimited_10.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);


                    nb_line_tFileOutputDelimited_10++;
                    resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);

                        outtFileOutputDelimited_10.write(sb_tFileOutputDelimited_10.toString());




 


	tos_count_tFileOutputDelimited_10++;

/**
 * [tFileOutputDelimited_10 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	

 



/**
 * [tFileOutputDelimited_10 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	

 



/**
 * [tFileOutputDelimited_10 process_data_end ] stop
 */

} // End of branch "out7"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tFileInputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	



            }
            }finally{
                if(!((Object)("D:/DataLake/RawData/productModel_"+TalendDate.getDate("YYYY-MM-DD")+".csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_8!=null){
                		fid_tFileInputDelimited_8.close();
                	}
                }
                if(fid_tFileInputDelimited_8!=null){
                	globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_8", true);
end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());




/**
 * [tFileInputDelimited_8 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_10 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	



		
			
					if(outtFileOutputDelimited_10!=null) {
						outtFileOutputDelimited_10.flush();
						outtFileOutputDelimited_10.close();
					}
				
				globalMap.put("tFileOutputDelimited_10_NB_LINE",nb_line_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME",fileName_tFileOutputDelimited_10);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_10", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out7");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_10", true);
end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_10 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_10 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	


		if(resourceMap.get("finish_tFileOutputDelimited_10") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_10 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_10");
						if(outtFileOutputDelimited_10!=null) {
							outtFileOutputDelimited_10.flush();
							outtFileOutputDelimited_10.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}
	


public static class out8Struct implements routines.system.IPersistableRow<out8Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public int ProductDescriptionID;

				public int getProductDescriptionID () {
					return this.ProductDescriptionID;
				}
				
			    public String Culture;

				public String getCulture () {
					return this.Culture;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductModelID;
						
							result = prime * result + (int) this.ProductDescriptionID;
						
						result = prime * result + ((this.Culture == null) ? 0 : this.Culture.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out8Struct other = (out8Struct) obj;
		
						if (this.ProductModelID != other.ProductModelID)
							return false;
					
						if (this.ProductDescriptionID != other.ProductDescriptionID)
							return false;
					
						if (this.Culture == null) {
							if (other.Culture != null)
								return false;
						
						} else if (!this.Culture.equals(other.Culture))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out8Struct other) {

		other.ProductModelID = this.ProductModelID;
	            other.ProductDescriptionID = this.ProductDescriptionID;
	            other.Culture = this.Culture;
	            
	}

	public void copyKeysDataTo(out8Struct other) {

		other.ProductModelID = this.ProductModelID;
	            	other.ProductDescriptionID = this.ProductDescriptionID;
	            	other.Culture = this.Culture;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
			        this.ProductDescriptionID = dis.readInt();
					
					this.Culture = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
					// String
				
						writeString(this.Culture,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",ProductDescriptionID="+String.valueOf(ProductDescriptionID));
		sb.append(",Culture="+Culture);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ProductDescriptionID, other.ProductDescriptionID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Culture, other.Culture);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public int ProductDescriptionID;

				public int getProductDescriptionID () {
					return this.ProductDescriptionID;
				}
				
			    public String Culture;

				public String getCulture () {
					return this.Culture;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
			        this.ProductDescriptionID = dis.readInt();
					
					this.Culture = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
					// String
				
						writeString(this.Culture,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",ProductDescriptionID="+String.valueOf(ProductDescriptionID));
		sb.append(",Culture="+Culture);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();
out8Struct out8 = new out8Struct();





	
	/**
	 * [tFileOutputDelimited_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_11", false);
		start_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out8");
					}
				
		int tos_count_tFileOutputDelimited_11 = 0;
		

String fileName_tFileOutputDelimited_11 = "";
    fileName_tFileOutputDelimited_11 = (new java.io.File("D:/DataLake/Harmonized/HA_productModelProductDescription_"+TalendDate.getDate("YYYY-MM-DD")+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_11 = null;
    String extension_tFileOutputDelimited_11 = null;
    String directory_tFileOutputDelimited_11 = null;
    if((fileName_tFileOutputDelimited_11.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_11.lastIndexOf(".") < fileName_tFileOutputDelimited_11.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
            extension_tFileOutputDelimited_11 = "";
        } else {
            fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0, fileName_tFileOutputDelimited_11.lastIndexOf("."));
            extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(fileName_tFileOutputDelimited_11.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0, fileName_tFileOutputDelimited_11.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_11.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0, fileName_tFileOutputDelimited_11.lastIndexOf("."));
            extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(fileName_tFileOutputDelimited_11.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
            extension_tFileOutputDelimited_11 = "";
        }
        directory_tFileOutputDelimited_11 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_11 = true;
    java.io.File filetFileOutputDelimited_11 = new java.io.File(fileName_tFileOutputDelimited_11);
    globalMap.put("tFileOutputDelimited_11_FILE_NAME",fileName_tFileOutputDelimited_11);
            int nb_line_tFileOutputDelimited_11 = 0;
            int splitedFileNo_tFileOutputDelimited_11 = 0;
            int currentRow_tFileOutputDelimited_11 = 0;

            final String OUT_DELIM_tFileOutputDelimited_11 = /** Start field tFileOutputDelimited_11:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_11:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_11 = /** Start field tFileOutputDelimited_11:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_11:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_11 != null && directory_tFileOutputDelimited_11.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_11 = new java.io.File(directory_tFileOutputDelimited_11);
                        if(!dir_tFileOutputDelimited_11.exists()) {
                            dir_tFileOutputDelimited_11.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_11 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_11 = new java.io.File(fileName_tFileOutputDelimited_11);
                        if(fileToDelete_tFileOutputDelimited_11.exists()) {
                            fileToDelete_tFileOutputDelimited_11.delete();
                        }
                        outtFileOutputDelimited_11 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_11, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_11.length()==0){
                                        outtFileOutputDelimited_11.write("ProductModelID");
                                            outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
                                        outtFileOutputDelimited_11.write("ProductDescriptionID");
                                            outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
                                        outtFileOutputDelimited_11.write("Culture");
                                        outtFileOutputDelimited_11.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);
                                        outtFileOutputDelimited_11.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_11", outtFileOutputDelimited_11);
resourceMap.put("nb_line_tFileOutputDelimited_11", nb_line_tFileOutputDelimited_11);

 



/**
 * [tFileOutputDelimited_11 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out8Struct out8_tmp = new out8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_9", false);
		start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_9";

	
		int tos_count_tFileInputDelimited_9 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				int limit_tFileInputDelimited_9 = -1;
				try{
					
						Object filename_tFileInputDelimited_9 = "D:/DataLake/RawData/productModelProductDescription_"+TalendDate.getDate("YYYY-MM-DD")+".csv";
						if(filename_tFileInputDelimited_9 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
			if(footer_value_tFileInputDelimited_9 >0 || random_value_tFileInputDelimited_9 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited("D:/DataLake/RawData/productModelProductDescription_"+TalendDate.getDate("YYYY-MM-DD")+".csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_9
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_9!=null && fid_tFileInputDelimited_9.nextRecord()) {
						rowstate_tFileInputDelimited_9.reset();
						
			    						row11 = null;			
												
									boolean whetherReject_tFileInputDelimited_9 = false;
									row11 = new row11Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_9 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_9 = 0;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								row11.ProductModelID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductModelID", "row11", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_9.setException(new RuntimeException("Value is empty for column : 'ProductModelID' in 'row11' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 1;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								row11.ProductDescriptionID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductDescriptionID", "row11", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_9.setException(new RuntimeException("Value is empty for column : 'ProductDescriptionID' in 'row11' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 2;
					
							row11.Culture = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 3;
					
							row11.rowguid = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 4;
					
							row11.ModifiedDate = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
				
										
										if(rowstate_tFileInputDelimited_9.getException()!=null) {
											throw rowstate_tFileInputDelimited_9.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_9 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row11 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_9 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 


	tos_count_tFileInputDelimited_9++;

/**
 * [tFileInputDelimited_9 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

out8 = null;


// # Output table : 'out8'
out8_tmp.ProductModelID = row11.ProductModelID ;
out8_tmp.ProductDescriptionID = row11.ProductDescriptionID ;
out8_tmp.Culture = row11.Culture ;
out8 = out8_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out8"
if(out8 != null) { 



	
	/**
	 * [tFileOutputDelimited_11 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out8");
					}
					


                    StringBuilder sb_tFileOutputDelimited_11 = new StringBuilder();
                        sb_tFileOutputDelimited_11.append(
                            out8.ProductModelID
                        );
                            sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
                        sb_tFileOutputDelimited_11.append(
                            out8.ProductDescriptionID
                        );
                            sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
                            if(out8.Culture != null) {
                        sb_tFileOutputDelimited_11.append(
                            out8.Culture
                        );
                            }
                    sb_tFileOutputDelimited_11.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);


                    nb_line_tFileOutputDelimited_11++;
                    resourceMap.put("nb_line_tFileOutputDelimited_11", nb_line_tFileOutputDelimited_11);

                        outtFileOutputDelimited_11.write(sb_tFileOutputDelimited_11.toString());




 


	tos_count_tFileOutputDelimited_11++;

/**
 * [tFileOutputDelimited_11 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_11";

	

 



/**
 * [tFileOutputDelimited_11 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_11";

	

 



/**
 * [tFileOutputDelimited_11 process_data_end ] stop
 */

} // End of branch "out8"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tFileInputDelimited_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	



            }
            }finally{
                if(!((Object)("D:/DataLake/RawData/productModelProductDescription_"+TalendDate.getDate("YYYY-MM-DD")+".csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_9!=null){
                		fid_tFileInputDelimited_9.close();
                	}
                }
                if(fid_tFileInputDelimited_9!=null){
                	globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_9", true);
end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());




/**
 * [tFileInputDelimited_9 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_11 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_11";

	



		
			
					if(outtFileOutputDelimited_11!=null) {
						outtFileOutputDelimited_11.flush();
						outtFileOutputDelimited_11.close();
					}
				
				globalMap.put("tFileOutputDelimited_11_NB_LINE",nb_line_tFileOutputDelimited_11);
				globalMap.put("tFileOutputDelimited_11_FILE_NAME",fileName_tFileOutputDelimited_11);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_11", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out8");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_11", true);
end_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_11 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_9 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_11 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_11";

	


		if(resourceMap.get("finish_tFileOutputDelimited_11") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_11 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_11");
						if(outtFileOutputDelimited_11!=null) {
							outtFileOutputDelimited_11.flush();
							outtFileOutputDelimited_11.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}
	


public static class out9Struct implements routines.system.IPersistableRow<out9Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public Object UnitPrice;

				public Object getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Object UnitPriceDiscount;

				public Object getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public BigDecimal LineTotal;

				public BigDecimal getLineTotal () {
					return this.LineTotal;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesOrderID;
						
							result = prime * result + (int) this.SalesOrderDetailID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out9Struct other = (out9Struct) obj;
		
						if (this.SalesOrderID != other.SalesOrderID)
							return false;
					
						if (this.SalesOrderDetailID != other.SalesOrderDetailID)
							return false;
					

		return true;
    }

	public void copyDataTo(out9Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.SalesOrderDetailID = this.SalesOrderDetailID;
	            other.OrderQty = this.OrderQty;
	            other.ProductID = this.ProductID;
	            other.UnitPrice = this.UnitPrice;
	            other.UnitPriceDiscount = this.UnitPriceDiscount;
	            other.LineTotal = this.LineTotal;
	            
	}

	public void copyKeysDataTo(out9Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	other.SalesOrderDetailID = this.SalesOrderDetailID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.SalesOrderDetailID = dis.readInt();
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
						this.UnitPrice = (Object) dis.readObject();
					
						this.UnitPriceDiscount = (Object) dis.readObject();
					
						this.LineTotal = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// Object
				
       			    	dos.writeObject(this.UnitPrice);
					
					// Object
				
       			    	dos.writeObject(this.UnitPriceDiscount);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LineTotal);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SalesOrderDetailID, other.SalesOrderDetailID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public Object UnitPrice;

				public Object getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Object UnitPriceDiscount;

				public Object getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public BigDecimal LineTotal;

				public BigDecimal getLineTotal () {
					return this.LineTotal;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.SalesOrderDetailID = dis.readInt();
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
						this.UnitPrice = (Object) dis.readObject();
					
						this.UnitPriceDiscount = (Object) dis.readObject();
					
						this.LineTotal = (BigDecimal) dis.readObject();
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// Object
				
       			    	dos.writeObject(this.UnitPrice);
					
					// Object
				
       			    	dos.writeObject(this.UnitPriceDiscount);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LineTotal);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
out9Struct out9 = new out9Struct();





	
	/**
	 * [tFileOutputDelimited_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_12", false);
		start_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out9");
					}
				
		int tos_count_tFileOutputDelimited_12 = 0;
		

String fileName_tFileOutputDelimited_12 = "";
    fileName_tFileOutputDelimited_12 = (new java.io.File("D:/DataLake/Harmonized/HA_salesOrderDetail_"+TalendDate.getDate("YYYY-MM-DD")+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_12 = null;
    String extension_tFileOutputDelimited_12 = null;
    String directory_tFileOutputDelimited_12 = null;
    if((fileName_tFileOutputDelimited_12.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_12.lastIndexOf(".") < fileName_tFileOutputDelimited_12.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
            extension_tFileOutputDelimited_12 = "";
        } else {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0, fileName_tFileOutputDelimited_12.lastIndexOf("."));
            extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0, fileName_tFileOutputDelimited_12.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_12.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0, fileName_tFileOutputDelimited_12.lastIndexOf("."));
            extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
            extension_tFileOutputDelimited_12 = "";
        }
        directory_tFileOutputDelimited_12 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_12 = true;
    java.io.File filetFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
    globalMap.put("tFileOutputDelimited_12_FILE_NAME",fileName_tFileOutputDelimited_12);
            int nb_line_tFileOutputDelimited_12 = 0;
            int splitedFileNo_tFileOutputDelimited_12 = 0;
            int currentRow_tFileOutputDelimited_12 = 0;

            final String OUT_DELIM_tFileOutputDelimited_12 = /** Start field tFileOutputDelimited_12:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_12:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_12 = /** Start field tFileOutputDelimited_12:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_12:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_12 != null && directory_tFileOutputDelimited_12.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_12 = new java.io.File(directory_tFileOutputDelimited_12);
                        if(!dir_tFileOutputDelimited_12.exists()) {
                            dir_tFileOutputDelimited_12.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_12 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
                        if(fileToDelete_tFileOutputDelimited_12.exists()) {
                            fileToDelete_tFileOutputDelimited_12.delete();
                        }
                        outtFileOutputDelimited_12 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_12, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_12.length()==0){
                                        outtFileOutputDelimited_12.write("SalesOrderID");
                                            outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
                                        outtFileOutputDelimited_12.write("SalesOrderDetailID");
                                            outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
                                        outtFileOutputDelimited_12.write("OrderQty");
                                            outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
                                        outtFileOutputDelimited_12.write("ProductID");
                                            outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
                                        outtFileOutputDelimited_12.write("UnitPrice");
                                            outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
                                        outtFileOutputDelimited_12.write("UnitPriceDiscount");
                                            outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
                                        outtFileOutputDelimited_12.write("LineTotal");
                                        outtFileOutputDelimited_12.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);
                                        outtFileOutputDelimited_12.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_12", outtFileOutputDelimited_12);
resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);

 



/**
 * [tFileOutputDelimited_12 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
out9Struct out9_tmp = new out9Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_10", false);
		start_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_10";

	
		int tos_count_tFileInputDelimited_10 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_10 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				int limit_tFileInputDelimited_10 = -1;
				try{
					
						Object filename_tFileInputDelimited_10 = "D:/DataLake/RawData/salesOrderDetail_"+TalendDate.getDate("YYYY-MM-DD")+".csv";
						if(filename_tFileInputDelimited_10 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
			if(footer_value_tFileInputDelimited_10 >0 || random_value_tFileInputDelimited_10 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited("D:/DataLake/RawData/salesOrderDetail_"+TalendDate.getDate("YYYY-MM-DD")+".csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_10
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_10!=null && fid_tFileInputDelimited_10.nextRecord()) {
						rowstate_tFileInputDelimited_10.reset();
						
			    						row12 = null;			
												
									boolean whetherReject_tFileInputDelimited_10 = false;
									row12 = new row12Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_10 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_10 = 0;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row12.SalesOrderID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderID", "row12", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'SalesOrderID' in 'row12' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 1;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row12.SalesOrderDetailID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderDetailID", "row12", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'SalesOrderDetailID' in 'row12' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 2;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row12.OrderQty = ParserUtils.parseTo_short(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"OrderQty", "row12", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'OrderQty' in 'row12' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 3;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row12.ProductID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "row12", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'ProductID' in 'row12' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 4;
					
							row12.UnitPrice = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 5;
					
							row12.UnitPriceDiscount = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 6;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row12.LineTotal = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"LineTotal", "row12", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row12.LineTotal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 7;
					
							row12.rowguid = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 8;
					
							row12.ModifiedDate = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
				
										
										if(rowstate_tFileInputDelimited_10.getException()!=null) {
											throw rowstate_tFileInputDelimited_10.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_10 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row12 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_10 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 


	tos_count_tFileInputDelimited_10++;

/**
 * [tFileInputDelimited_10 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

out9 = null;


// # Output table : 'out9'
out9_tmp.SalesOrderID = row12.SalesOrderID ;
out9_tmp.SalesOrderDetailID = row12.SalesOrderDetailID ;
out9_tmp.OrderQty = row12.OrderQty ;
out9_tmp.ProductID = row12.ProductID ;
out9_tmp.UnitPrice = row12.UnitPrice ;
out9_tmp.UnitPriceDiscount = row12.UnitPriceDiscount ;
out9_tmp.LineTotal = row12.LineTotal ;
out9 = out9_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "out9"
if(out9 != null) { 



	
	/**
	 * [tFileOutputDelimited_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out9");
					}
					


                    StringBuilder sb_tFileOutputDelimited_12 = new StringBuilder();
                        sb_tFileOutputDelimited_12.append(
                            out9.SalesOrderID
                        );
                            sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
                        sb_tFileOutputDelimited_12.append(
                            out9.SalesOrderDetailID
                        );
                            sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
                        sb_tFileOutputDelimited_12.append(
                            out9.OrderQty
                        );
                            sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
                        sb_tFileOutputDelimited_12.append(
                            out9.ProductID
                        );
                            sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
                            if(out9.UnitPrice != null) {
                        sb_tFileOutputDelimited_12.append(
                            out9.UnitPrice
                        );
                            }
                            sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
                            if(out9.UnitPriceDiscount != null) {
                        sb_tFileOutputDelimited_12.append(
                            out9.UnitPriceDiscount
                        );
                            }
                            sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
                            if(out9.LineTotal != null) {
                        sb_tFileOutputDelimited_12.append(
                            out9.LineTotal.setScale(6, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                    sb_tFileOutputDelimited_12.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);


                    nb_line_tFileOutputDelimited_12++;
                    resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);

                        outtFileOutputDelimited_12.write(sb_tFileOutputDelimited_12.toString());




 


	tos_count_tFileOutputDelimited_12++;

/**
 * [tFileOutputDelimited_12 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	

 



/**
 * [tFileOutputDelimited_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	

 



/**
 * [tFileOutputDelimited_12 process_data_end ] stop
 */

} // End of branch "out9"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tFileInputDelimited_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	



            }
            }finally{
                if(!((Object)("D:/DataLake/RawData/salesOrderDetail_"+TalendDate.getDate("YYYY-MM-DD")+".csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_10!=null){
                		fid_tFileInputDelimited_10.close();
                	}
                }
                if(fid_tFileInputDelimited_10!=null){
                	globalMap.put("tFileInputDelimited_10_NB_LINE", fid_tFileInputDelimited_10.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_10", true);
end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());




/**
 * [tFileInputDelimited_10 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_12 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	



		
			
					if(outtFileOutputDelimited_12!=null) {
						outtFileOutputDelimited_12.flush();
						outtFileOutputDelimited_12.close();
					}
				
				globalMap.put("tFileOutputDelimited_12_NB_LINE",nb_line_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME",fileName_tFileOutputDelimited_12);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_12", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out9");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_12", true);
end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_12 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_10 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_12 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	


		if(resourceMap.get("finish_tFileOutputDelimited_12") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_12 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_12");
						if(outtFileOutputDelimited_12!=null) {
							outtFileOutputDelimited_12.flush();
							outtFileOutputDelimited_12.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_12 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}
	


public static class out10Struct implements routines.system.IPersistableRow<out10Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public short RevisionNumber;

				public short getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String DueDate;

				public String getDueDate () {
					return this.DueDate;
				}
				
			    public String ShipDate;

				public String getShipDate () {
					return this.ShipDate;
				}
				
			    public short Status;

				public short getStatus () {
					return this.Status;
				}
				
			    public boolean OnlineOrderFlag;

				public boolean getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String PurchaseOrderNumber;

				public String getPurchaseOrderNumber () {
					return this.PurchaseOrderNumber;
				}
				
			    public String AccountNumber;

				public String getAccountNumber () {
					return this.AccountNumber;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public Object SubTotal;

				public Object getSubTotal () {
					return this.SubTotal;
				}
				
			    public Object TaxAmt;

				public Object getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public Object Freight;

				public Object getFreight () {
					return this.Freight;
				}
				
			    public Object TotalDue;

				public Object getTotalDue () {
					return this.TotalDue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readString(dis);
					
					this.DueDate = readString(dis);
					
					this.ShipDate = readString(dis);
					
			        this.Status = dis.readShort();
					
			        this.OnlineOrderFlag = dis.readBoolean();
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
						this.SubTotal = (Object) dis.readObject();
					
						this.TaxAmt = (Object) dis.readObject();
					
						this.Freight = (Object) dis.readObject();
					
						this.TotalDue = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.DueDate,dos);
					
					// String
				
						writeString(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// boolean
				
		            	dos.writeBoolean(this.OnlineOrderFlag);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.SubTotal);
					
					// Object
				
       			    	dos.writeObject(this.TaxAmt);
					
					// Object
				
       			    	dos.writeObject(this.Freight);
					
					// Object
				
       			    	dos.writeObject(this.TotalDue);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+String.valueOf(RevisionNumber));
		sb.append(",OrderDate="+OrderDate);
		sb.append(",DueDate="+DueDate);
		sb.append(",ShipDate="+ShipDate);
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+String.valueOf(OnlineOrderFlag));
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",PurchaseOrderNumber="+PurchaseOrderNumber);
		sb.append(",AccountNumber="+AccountNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_INGESTAODADOS_JobExportHarmonized = new byte[0];
    static byte[] commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[0];

	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public short RevisionNumber;

				public short getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String DueDate;

				public String getDueDate () {
					return this.DueDate;
				}
				
			    public String ShipDate;

				public String getShipDate () {
					return this.ShipDate;
				}
				
			    public short Status;

				public short getStatus () {
					return this.Status;
				}
				
			    public boolean OnlineOrderFlag;

				public boolean getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String PurchaseOrderNumber;

				public String getPurchaseOrderNumber () {
					return this.PurchaseOrderNumber;
				}
				
			    public String AccountNumber;

				public String getAccountNumber () {
					return this.AccountNumber;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public Object SubTotal;

				public Object getSubTotal () {
					return this.SubTotal;
				}
				
			    public Object TaxAmt;

				public Object getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public Object Freight;

				public Object getFreight () {
					return this.Freight;
				}
				
			    public Object TotalDue;

				public Object getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INGESTAODADOS_JobExportHarmonized.length) {
				if(length < 1024 && commonByteArray_INGESTAODADOS_JobExportHarmonized.length == 0) {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[1024];
				} else {
   					commonByteArray_INGESTAODADOS_JobExportHarmonized = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length);
			strReturn = new String(commonByteArray_INGESTAODADOS_JobExportHarmonized, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INGESTAODADOS_JobExportHarmonized) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readString(dis);
					
					this.DueDate = readString(dis);
					
					this.ShipDate = readString(dis);
					
			        this.Status = dis.readShort();
					
			        this.OnlineOrderFlag = dis.readBoolean();
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
						this.SubTotal = (Object) dis.readObject();
					
						this.TaxAmt = (Object) dis.readObject();
					
						this.Freight = (Object) dis.readObject();
					
						this.TotalDue = (Object) dis.readObject();
					
					this.Comment = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.DueDate,dos);
					
					// String
				
						writeString(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// boolean
				
		            	dos.writeBoolean(this.OnlineOrderFlag);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.SubTotal);
					
					// Object
				
       			    	dos.writeObject(this.TaxAmt);
					
					// Object
				
       			    	dos.writeObject(this.Freight);
					
					// Object
				
       			    	dos.writeObject(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+String.valueOf(RevisionNumber));
		sb.append(",OrderDate="+OrderDate);
		sb.append(",DueDate="+DueDate);
		sb.append(",ShipDate="+ShipDate);
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+String.valueOf(OnlineOrderFlag));
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",PurchaseOrderNumber="+PurchaseOrderNumber);
		sb.append(",AccountNumber="+AccountNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();
out10Struct out10 = new out10Struct();





	
	/**
	 * [tFileOutputDelimited_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_13", false);
		start_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out10");
					}
				
		int tos_count_tFileOutputDelimited_13 = 0;
		

String fileName_tFileOutputDelimited_13 = "";
    fileName_tFileOutputDelimited_13 = (new java.io.File("D:/DataLake/Harmonized/HA_salesOrderHeader_"+TalendDate.getDate("YYYY-MM-DD")+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_13 = null;
    String extension_tFileOutputDelimited_13 = null;
    String directory_tFileOutputDelimited_13 = null;
    if((fileName_tFileOutputDelimited_13.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_13.lastIndexOf(".") < fileName_tFileOutputDelimited_13.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
            extension_tFileOutputDelimited_13 = "";
        } else {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0, fileName_tFileOutputDelimited_13.lastIndexOf("."));
            extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0, fileName_tFileOutputDelimited_13.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_13.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0, fileName_tFileOutputDelimited_13.lastIndexOf("."));
            extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
            extension_tFileOutputDelimited_13 = "";
        }
        directory_tFileOutputDelimited_13 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_13 = true;
    java.io.File filetFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
    globalMap.put("tFileOutputDelimited_13_FILE_NAME",fileName_tFileOutputDelimited_13);
            int nb_line_tFileOutputDelimited_13 = 0;
            int splitedFileNo_tFileOutputDelimited_13 = 0;
            int currentRow_tFileOutputDelimited_13 = 0;

            final String OUT_DELIM_tFileOutputDelimited_13 = /** Start field tFileOutputDelimited_13:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_13:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_13 = /** Start field tFileOutputDelimited_13:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_13:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_13 != null && directory_tFileOutputDelimited_13.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_13 = new java.io.File(directory_tFileOutputDelimited_13);
                        if(!dir_tFileOutputDelimited_13.exists()) {
                            dir_tFileOutputDelimited_13.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_13 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
                        if(fileToDelete_tFileOutputDelimited_13.exists()) {
                            fileToDelete_tFileOutputDelimited_13.delete();
                        }
                        outtFileOutputDelimited_13 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_13, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_13.length()==0){
                                        outtFileOutputDelimited_13.write("SalesOrderID");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("RevisionNumber");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("OrderDate");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("DueDate");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("ShipDate");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("Status");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("OnlineOrderFlag");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("SalesOrderNumber");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("PurchaseOrderNumber");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("AccountNumber");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("CustomerID");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("ShipToAddressID");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("BillToAddressID");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("ShipMethod");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("CreditCardApprovalCode");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("SubTotal");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("TaxAmt");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("Freight");
                                            outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.write("TotalDue");
                                        outtFileOutputDelimited_13.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);
                                        outtFileOutputDelimited_13.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_13", outtFileOutputDelimited_13);
resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);

 



/**
 * [tFileOutputDelimited_13 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
out10Struct out10_tmp = new out10Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_11", false);
		start_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_11";

	
		int tos_count_tFileInputDelimited_11 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_11 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_11 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11 = null;
				int limit_tFileInputDelimited_11 = -1;
				try{
					
						Object filename_tFileInputDelimited_11 = "D:/DataLake/RawData/salesOrderHeader_"+TalendDate.getDate("YYYY-MM-DD")+".csv";
						if(filename_tFileInputDelimited_11 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_11 = 0, random_value_tFileInputDelimited_11 = -1;
			if(footer_value_tFileInputDelimited_11 >0 || random_value_tFileInputDelimited_11 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_11 = new org.talend.fileprocess.FileInputDelimited("D:/DataLake/RawData/salesOrderHeader_"+TalendDate.getDate("YYYY-MM-DD")+".csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_11
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_11!=null && fid_tFileInputDelimited_11.nextRecord()) {
						rowstate_tFileInputDelimited_11.reset();
						
			    						row13 = null;			
												
									boolean whetherReject_tFileInputDelimited_11 = false;
									row13 = new row13Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_11 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_11 = 0;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								row13.SalesOrderID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderID", "row13", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'SalesOrderID' in 'row13' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 1;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								row13.RevisionNumber = ParserUtils.parseTo_short(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"RevisionNumber", "row13", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'RevisionNumber' in 'row13' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 2;
					
							row13.OrderDate = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 3;
					
							row13.DueDate = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 4;
					
							row13.ShipDate = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 5;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								row13.Status = ParserUtils.parseTo_short(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Status", "row13", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'Status' in 'row13' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 6;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								row13.OnlineOrderFlag = ParserUtils.parseTo_boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"OnlineOrderFlag", "row13", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'OnlineOrderFlag' in 'row13' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 7;
					
							row13.SalesOrderNumber = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 8;
					
							row13.PurchaseOrderNumber = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 9;
					
							row13.AccountNumber = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 10;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								row13.CustomerID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "row13", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'CustomerID' in 'row13' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 11;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								row13.ShipToAddressID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ShipToAddressID", "row13", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								
									row13.ShipToAddressID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 12;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								row13.BillToAddressID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"BillToAddressID", "row13", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								
									row13.BillToAddressID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 13;
					
							row13.ShipMethod = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 14;
					
							row13.CreditCardApprovalCode = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 15;
					
							row13.SubTotal = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 16;
					
							row13.TaxAmt = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 17;
					
							row13.Freight = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 18;
					
							row13.TotalDue = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 19;
					
							row13.Comment = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 20;
					
							row13.rowguid = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 21;
					
							row13.ModifiedDate = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
				
										
										if(rowstate_tFileInputDelimited_11.getException()!=null) {
											throw rowstate_tFileInputDelimited_11.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_11 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row13 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_11 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 


	tos_count_tFileInputDelimited_11++;

/**
 * [tFileInputDelimited_11 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

out10 = null;


// # Output table : 'out10'
out10_tmp.SalesOrderID = row13.SalesOrderID ;
out10_tmp.RevisionNumber = row13.RevisionNumber ;
out10_tmp.OrderDate = row13.OrderDate ;
out10_tmp.DueDate = row13.DueDate ;
out10_tmp.ShipDate = row13.ShipDate ;
out10_tmp.Status = row13.Status ;
out10_tmp.OnlineOrderFlag = row13.OnlineOrderFlag ;
out10_tmp.SalesOrderNumber = row13.SalesOrderNumber ;
out10_tmp.PurchaseOrderNumber = row13.PurchaseOrderNumber ;
out10_tmp.AccountNumber = row13.AccountNumber ;
out10_tmp.CustomerID = row13.CustomerID ;
out10_tmp.ShipToAddressID = row13.ShipToAddressID ;
out10_tmp.BillToAddressID = row13.BillToAddressID ;
out10_tmp.ShipMethod = row13.ShipMethod ;
out10_tmp.CreditCardApprovalCode = row13.CreditCardApprovalCode ;
out10_tmp.SubTotal = row13.SubTotal ;
out10_tmp.TaxAmt = row13.TaxAmt ;
out10_tmp.Freight = row13.Freight ;
out10_tmp.TotalDue = row13.TotalDue ;
out10 = out10_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "out10"
if(out10 != null) { 



	
	/**
	 * [tFileOutputDelimited_13 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out10");
					}
					


                    StringBuilder sb_tFileOutputDelimited_13 = new StringBuilder();
                        sb_tFileOutputDelimited_13.append(
                            out10.SalesOrderID
                        );
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                        sb_tFileOutputDelimited_13.append(
                            out10.RevisionNumber
                        );
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.OrderDate != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.OrderDate
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.DueDate != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.DueDate
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.ShipDate != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.ShipDate
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                        sb_tFileOutputDelimited_13.append(
                            out10.Status
                        );
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                        sb_tFileOutputDelimited_13.append(
                            out10.OnlineOrderFlag
                        );
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.SalesOrderNumber != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.SalesOrderNumber
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.PurchaseOrderNumber != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.PurchaseOrderNumber
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.AccountNumber != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.AccountNumber
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                        sb_tFileOutputDelimited_13.append(
                            out10.CustomerID
                        );
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.ShipToAddressID != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.ShipToAddressID
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.BillToAddressID != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.BillToAddressID
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.ShipMethod != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.ShipMethod
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.CreditCardApprovalCode != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.CreditCardApprovalCode
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.SubTotal != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.SubTotal
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.TaxAmt != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.TaxAmt
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.Freight != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.Freight
                        );
                            }
                            sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
                            if(out10.TotalDue != null) {
                        sb_tFileOutputDelimited_13.append(
                            out10.TotalDue
                        );
                            }
                    sb_tFileOutputDelimited_13.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);


                    nb_line_tFileOutputDelimited_13++;
                    resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);

                        outtFileOutputDelimited_13.write(sb_tFileOutputDelimited_13.toString());




 


	tos_count_tFileOutputDelimited_13++;

/**
 * [tFileOutputDelimited_13 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	

 



/**
 * [tFileOutputDelimited_13 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	

 



/**
 * [tFileOutputDelimited_13 process_data_end ] stop
 */

} // End of branch "out10"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tFileInputDelimited_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	



            }
            }finally{
                if(!((Object)("D:/DataLake/RawData/salesOrderHeader_"+TalendDate.getDate("YYYY-MM-DD")+".csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_11!=null){
                		fid_tFileInputDelimited_11.close();
                	}
                }
                if(fid_tFileInputDelimited_11!=null){
                	globalMap.put("tFileInputDelimited_11_NB_LINE", fid_tFileInputDelimited_11.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_11", true);
end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());




/**
 * [tFileInputDelimited_11 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_13 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	



		
			
					if(outtFileOutputDelimited_13!=null) {
						outtFileOutputDelimited_13.flush();
						outtFileOutputDelimited_13.close();
					}
				
				globalMap.put("tFileOutputDelimited_13_NB_LINE",nb_line_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME",fileName_tFileOutputDelimited_13);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_13", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out10");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_13", true);
end_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_13 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_11 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_13 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	


		if(resourceMap.get("finish_tFileOutputDelimited_13") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_13 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_13");
						if(outtFileOutputDelimited_13!=null) {
							outtFileOutputDelimited_13.flush();
							outtFileOutputDelimited_13.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final JobExportHarmonized JobExportHarmonizedClass = new JobExportHarmonized();

        int exitCode = JobExportHarmonizedClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = JobExportHarmonized.class.getClassLoader().getResourceAsStream("ingestaodados/jobexportharmonized_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = JobExportHarmonized.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_2.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_3.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_4.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_5.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_6Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_6.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_7Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_7) {
globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_7.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_8.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_9Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_9.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_10Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_10.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_11Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_11.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : JobExportHarmonized");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     395604 characters generated by Talend Open Studio for Big Data 
 *     on the 30 de Abril de 2021 20h46min12s BRT
 ************************************************************************************************/